[{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to aorsf","title":"Contributing to aorsf","text":"Want contribute aorsf? Great! aorsf initially stable state development, great deal active subsequent development envisioned. outline propose change aorsf. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to aorsf","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to aorsf","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to aorsf","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"bcjaeger/aorsf\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to aorsf","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to aorsf","text":"Please note aorsf project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://bcjaeger.github.io/aorsf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 aorsf authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"background-orsf","dir":"Articles","previous_headings":"","what":"Background: ORSF","title":"Introduction to aorsf","text":"oblique random survival forest (ORSF) extension axis-based RSF algorithm can found several R packages, including RandomForestSRC, party, ranger.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"what-is-an-oblique-decision-tree","dir":"Articles","previous_headings":"","what":"What is an oblique decision tree?","title":"Introduction to aorsf","text":"Decision trees developed splitting set training data two new subsets, goal similarity within new subsets . splitting process repeated resulting subsets data stopping criterion met. new subsets data formed based single predictor, decision tree said axis-based splits data appear perpendicular axis predictor. linear combinations variables used instead single variable, tree oblique splits data neither parallel right angle axis. Decision trees classification axis-based splitting (left) oblique splitting (right). Cases orange squares; controls purple circles. trees partition predictor space defined variables X1 X2, oblique splits better job separating two classes.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"accelerated-orsf","dir":"Articles","previous_headings":"","what":"Accelerated ORSF","title":"Introduction to aorsf","text":"purpose aorsf (‘’ short accelerated) provide routines fit ORSFs scale adequately large data sets. example, aorsf::orsf() runs 500 times faster predecessor, obliqueRSF::ORSF(). fit accelerated ORSF model, use orsf function: may notice first input aorsf data_train. design choice makes easier use orsf pipes (.e., %>% |>). instance, addition reputation slow computing, oblique decision trees considered less interpretable axis-based counterparts. opinionated developer aorsf disagrees sentiment, included routines aorsf use coefficients linear combinations input variables estimate variable importance identify pair-wise interactions.","code":"library(aorsf) library(ggplot2)  set.seed(329)  orsf_fit <- orsf(data_train = pbc_orsf,                   formula = Surv(time, status) ~ . - id,                   n_tree = 2500)  orsf_fit #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 2500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 19 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>          OOB C-statistic: 0.84 #>  #> ----------------------------------------- library(dplyr)  orsf_fit <- pbc_orsf |>   select(-id) |>   orsf(formula = Surv(time, status) ~ .)"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"variable-importance","dir":"Articles","previous_headings":"Accelerated ORSF","what":"Variable importance","title":"Introduction to aorsf","text":"aorsf provides multiple ways compute variable importance. compute negation importance, ORSF multiplies coefficient variable -1 re-computes --sample (sometimes referred --bag) accuracy ORSF model.","code":"variable_importance <- orsf_vi_negate(orsf_fit)  variable_importance #>          bili           age        copper       protime       ascites  #>  0.0153637831  0.0125514296  0.0073954482  0.0061975939  0.0056767877  #>         stage       spiders           sex         edema           ast  #>  0.0048434977  0.0042706109  0.0038018853  0.0030777167  0.0026040310  #>        hepato       albumin      alk.phos          trig          chol  #>  0.0022915473  0.0014061768  0.0002604031 -0.0001562419 -0.0007812093  #>           trt      platelet  #> -0.0011978543 -0.0023436279"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"variable-interaction","dir":"Articles","previous_headings":"Accelerated ORSF","what":"Variable interaction","title":"Introduction to aorsf","text":"ORSF’s two-way interaction score pair predictors proportion variability coefficient one predictor explained mean . one predictor’s coefficient highly correlated another predictor’s mean value, two-way interaction score high (maximum value score 1). correlation coefficient one predictor mean value another, two-way interaction score low (minimum value score 0).","code":"variable_interaction <- orsf_interaction(orsf_fit)  variable_interaction[1:5, ] #>           v1       v2      value #> 1:   edema_1     bili 0.09516179 #> 2: ascites_1     bili 0.08722359 #> 3: ascites_1 hepato_1 0.08607192 #> 4:  hepato_1  edema_1 0.08104954 #> 5:   edema_1   copper 0.07484794"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"partial-dependence","dir":"Articles","previous_headings":"Accelerated ORSF","what":"Partial dependence","title":"Introduction to aorsf","text":"orsf_interaction() indicated edema == 1 bili highest interaction score. can use orsf_pd_summary() function (pd = partial dependence) explore variables influence expected prediction ORSF.  presence edema clearly effect predicted risk, makes hard see interaction effect plot. Let’s align partial dependence values edema subgroups curve start value 0 aligned partial dependence values can see interaction effect clearly. Increasing bilirubin solicits greater increase predicted risk patients edema (edema == 0), untreated edema (edema == 0.5), successfully treated edema (edema == 0.5) compared patients therapy-resistant edema (edema == 1).  similarity trajectories patients edema == 0 edema == 0.5 explains ORSF high interaction score combination edema == 1 bilirubin. sanity check, can fit Cox regression model conduct likelihood ratio test interaction: interaction p-value 0.0208 interpreted usual way account must large number degrees freedom used ORSF scanned every pairwise interaction (153 case) data. However, nice see strongest interaction identified ORSF also identified traditional modeling strategy.","code":"# make a list containing the variable values you # want to compute partial dependence for pd_spec <- list(edema = c(\"0\", \"0.5\", \"1\"),                 bili = seq(0.6, 7.1, by = 0.1))  # orsf_pd_summary automatically computes pd for all combinations # in the list (this can be turned off with expand_grid = FALSE) pd_data <- orsf_pd_summary(object = orsf_fit,                             pd_spec = pd_spec,                            expand_grid = TRUE)  ggplot(pd_data) +  aes(x = bili, y = mean, col = edema) +  geom_line() +   labs(y = 'Predicted risk',       x = 'Bilirubin',       title = 'Partial dependence of bilirubin and edema') # aligning predictions at lowest value of bili min_ed_0 <- with(pd_data, mean[edema == \"0\"   & bili == 0.6]) min_ed_1 <- with(pd_data, mean[edema == \"0.5\" & bili == 0.6]) min_ed_2 <- with(pd_data, mean[edema == \"1\"   & bili == 0.6])  pd_data_aligned <-  within(pd_data, {   value <- mean   value[edema == \"0\" ] <- value[edema == \"0\" ] - min_ed_0   value[edema == \"0.5\"] <- value[edema == \"0.5\"] - min_ed_1   value[edema == \"1\" ] <- value[edema == \"1\" ] - min_ed_2  })  head(pd_data_aligned) #>    edema bili      mean        lwr      medn       upr       value #> 1:     0  0.6 0.2154799 0.01718182 0.1162081 0.7622311 0.000000000 #> 2:   0.5  0.6 0.2734275 0.04075219 0.1871151 0.7838840 0.000000000 #> 3:     1  0.6 0.3839478 0.16722234 0.3064889 0.8566843 0.000000000 #> 4:     0  0.7 0.2170702 0.01754604 0.1162003 0.7668854 0.001590322 #> 5:   0.5  0.7 0.2756578 0.04128041 0.1897663 0.7867215 0.002230301 #> 6:     1  0.7 0.3853281 0.16888233 0.3075500 0.8591565 0.001380300 ggplot(pd_data_aligned) +  aes(x = bili, y = value, col = edema) +  geom_line() +   labs(y = 'Predictions centered at Bilirubin = 0.6',       x = 'Bilirubin',       title = 'Interaction between bilirubin and edema') library(survival)  anova(coxph(Surv(time,status) ~ edema * bili, data = pbc_orsf)) #> Analysis of Deviance Table #>  Cox model: response is Surv(time, status) #> Terms added sequentially (first to last) #>  #>             loglik   Chisq Df Pr(>|Chi|)     #> NULL       -550.19                           #> edema      -524.61 51.1681  2  7.744e-12 *** #> bili       -502.51 44.1953  1  2.972e-11 *** #> edema:bili -498.64  7.7459  2     0.0208 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"summarize-orsf-models","dir":"Articles","previous_headings":"Accelerated ORSF","what":"Summarize ORSF models","title":"Introduction to aorsf","text":"Getting straight variable importance partial dependence direct way can often helpful exploratory analyses. want lot information just little code, orsf_summarize_uni() tool :","code":"orsf_summarize_uni(orsf_fit, n_variables = 5) #>  #> -- ascites (VI Rank: 1) ------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      0 0.2937962 0.1615006 0.05345858 0.5290444 #>      1 0.4618232 0.3826351 0.26907079 0.6541703 #>  #> -- bili (VI Rank: 2) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2322995 0.1282478 0.04969597 0.3680273 #>   1.40 0.2512471 0.1412819 0.06288363 0.3883091 #>   3.52 0.3646850 0.2831674 0.16033196 0.5409685 #>  #> -- edema (VI Rank: 3) -------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      0 0.2890950 0.1603239 0.05109731 0.5178453 #>    0.5 0.3523922 0.2472444 0.10237048 0.6037737 #>      1 0.4383804 0.3373584 0.23987779 0.6480430 #>  #> -- copper (VI Rank: 4) ------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   42.8 0.2624793 0.1505639 0.04958913 0.4495358 #>   74.0 0.2790690 0.1631167 0.05814677 0.4807697 #>    129 0.3309482 0.2215598 0.10515721 0.5473132 #>  #> -- age (VI Rank: 5) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   41.5 0.2717600 0.1357782 0.04559734 0.4529935 #>   49.7 0.2973417 0.1673988 0.05263427 0.5141063 #>   56.6 0.3266062 0.2130041 0.07319402 0.5588488 #>  #>  Predicted risk at time t = 1788 for top 5 predictors"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"what-about-the-original-orsf","dir":"Articles","previous_headings":"","what":"What about the original ORSF?","title":"Introduction to aorsf","text":"original ORSF (.e., obliqueRSF) used glmnet find linear combinations inputs. aorsf allows users implement approach using orsf_control_net() function: net forests fit lot faster original ORSF function obliqueRSF. However, net forests still 100 times slower cph ones:","code":"orsf_net <- orsf(data_train = pbc_orsf,                   formula = Surv(time, status) ~ . - id,                   control = orsf_control_net(),                  n_tree = 50) # tracking how long it takes to fit 50 glmnet trees print(  t1 <- system.time(   orsf(data_train = pbc_orsf,         formula = Surv(time, status) ~ . - id,         control = orsf_control_net(),        n_tree = 50)  ) ) #>    user  system elapsed  #>   3.048   0.000   3.048  # and how long it takes to fit 50 cph trees print(  t2 <- system.time(   orsf(data_train = pbc_orsf,         formula = Surv(time, status) ~ . - id,         control = orsf_control_cph(),        n_tree = 50)  ) ) #>    user  system elapsed  #>   0.025   0.000   0.024  t1['elapsed'] / t2['elapsed'] #> elapsed  #>     127"},{"path":"https://bcjaeger.github.io/aorsf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Byron Jaeger. Author, maintainer. Nicholas Pajewski. Contributor.","code":""},{"path":"https://bcjaeger.github.io/aorsf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Byron C. Jaeger, D. Leann Long, Dustin M. Long, Mario Sims, Jeff M. Szychowski, Yuan-Min, Leslie . Mcclure, George Howard, Noah Simon (2019). Oblique Random Survival Forests. Ann. Appl. Stat. 13(3): 1847-1883. URL https://doi.org/10.1214/19-AOAS1261 DOI: 10.1214/19-AOAS1261","code":"@Article{,   title = {Oblique Random Survival Forests},   author = {Byron C. Jaeger and D. Leann Long and Dustin M. Long and Mario Sims and Jeff M. Szychowski and Yuan-I Min and Leslie A. Mcclure and George Howard and Noah Simon},   journal = {Annals of Applied Statistics},   year = {2019},   volume = {13},   number = {3},   pages = {1847--1883},   url = {https://doi.org/10.1214/19-AOAS1261}, }"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"aorsf","dir":"","previous_headings":"","what":"Accelerated Oblique Random Survival Forests","title":"Accelerated Oblique Random Survival Forests","text":"goal aorsf fit, interpret, make predictions oblique random survival forests (ORSFs). ‘’ title stands accelerated. ORSFs need accelerated? Oblique decision trees often accurate slower fit compared axis-based counterparts. issue higher computation time compounded survival decision trees, usually require computing classification regression trees. make ORSF accessible able engage larger datasets, aorsf applies strategies cut computing time without sacrificing prediction accuracy.","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Accelerated Oblique Random Survival Forests","text":"can install development version aorsf GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"bcjaeger/aorsf\")"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Accelerated Oblique Random Survival Forests","text":"orsf() function used fit ORSFs. Printing output orsf() give descriptive statistics ensemble. interpreting fit? several functions : orsf_vi() variable importance, orsf_interaction() two-way variable interactions, orsf_pd_ice() orsf_pd_summary() individual aggregated partial dependence values. However, orsf_summarize_uni() convenient way assess top predictor variables ORSF expected predicted risk specific values predictors. term ‘uni’ short univariate.","code":"library(aorsf)  fit <- orsf(data_train = pbc_orsf,             formula = Surv(time, status) ~ . - id)  print(fit) #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 19 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>          OOB C-statistic: 0.84 #>  #> ----------------------------------------- # take a look at the top 5 variables  # for continuous predictors, see expected risk at 25/50/75th quantile # for categorical predictors, see expected risk in each category  orsf_summarize_uni(object = fit, n_variables = 5) #>  #> -- age (VI Rank: 1) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   41.5 0.2706164 0.1337351 0.04630290 0.4612794 #>   49.7 0.2975084 0.1661233 0.05237698 0.5170854 #>   56.6 0.3284048 0.2116927 0.07674439 0.5457127 #>  #> -- bili (VI Rank: 2) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2320563 0.1234708 0.04876897 0.3530933 #>   1.40 0.2504298 0.1421328 0.06205604 0.3746472 #>   3.52 0.3650838 0.2800719 0.16607641 0.5189161 #>  #> -- sex (VI Rank: 3) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      m 0.3536771 0.2485654 0.11330040 0.5797451 #>      f 0.2928458 0.1494558 0.05061492 0.5113725 #>  #> -- spiders (VI Rank: 4) ------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      0 0.2881293 0.1477039 0.04940008 0.4931721 #>      1 0.3327476 0.2142004 0.08124437 0.5465791 #>  #> -- copper (VI Rank: 5) ------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   42.8 0.2619422 0.1423453 0.04838753 0.4504369 #>   74.0 0.2789013 0.1513143 0.05669541 0.4814084 #>    129 0.3313322 0.2132656 0.10764336 0.5389831 #>  #>  Predicted risk at time t = 1788 for top 5 predictors"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Accelerated Oblique Random Survival Forests","text":"Byron C. Jaeger, D. Leann Long, Dustin M. Long, Mario Sims, Jeff M. Szychowski, Yuan-Min, Leslie . Mcclure, George Howard, Noah Simon (2019). Oblique Random Survival Forests. Ann. Appl. Stat. 13(3): 1847-1883. URL https://doi.org/10.1214/19-AOAS1261 DOI: 10.1214/19-AOAS1261","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/aorsf-package.html","id":null,"dir":"Reference","previous_headings":"","what":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","title":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","text":"Fit, interpret, make predictions oblique random survival forests. Oblique decision trees notoriously slow compared axis based counterparts, 'aorsf' runs fast faster axis-based decision tree algorithms right-censored time--event outcomes.","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/aorsf-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","text":"Maintainer: Byron Jaeger bjaeger@wakehealth.edu (ORCID) contributors: Nicholas Pajewski [contributor]","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Oblique Random Survival Forest (ORSF) — orsf","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Oblique Random Survival Forest (ORSF)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"","code":"orsf(   data_train,   formula,   control = orsf_control_cph(),   n_tree = 500,   n_split = 5,   n_retry = 0,   mtry = NULL,   leaf_min_events = 1,   leaf_min_obs = 5,   split_min_events = 5,   split_min_obs = 10,   oobag_pred = TRUE,   oobag_time = NULL,   oobag_eval_every = n_tree,   importance = FALSE,   attach_data = TRUE )"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"data_train (data.frame) used grow forest. formula (formula) formula object, response left ~ operator, terms right (see details). Variables right hand size ~ can numeric, integer, factor variables. Factors may ordered unordered. control aorsf_control object, created orsf_control_net orsf_control_cph. Default control = orsf_control_cph(). n_tree (integer) number trees grow. Default n_tree = 500. n_split (integer) number cut-points assessed splitting node decision trees. Default n_split = 5. n_retry (integer) node can split, current linear combination inputs unable provide valid split, orsf try new linear combination based different set randomly selected predictors, n_retry pred_horizon. n_retry = 0 retry mechanic applied. Default n_retry = 0. mtry (integer) Number variables randomly selected candidates splitting node. default smallest integer greater square root number features, .e., mtry = ceiling(sqrt(number predictors)) leaf_min_events (integer) minimum number events leaf node. Default leaf_min_events = 1 leaf_min_obs (integer) minimum number observations leaf node. Default leaf_min_obs = 5 split_min_events (integer) minimum number events required split node. Default split_min_events = 5 split_min_obs (integer) minimum number observations required split node. Default split_min_obs = 10. oobag_pred (logical) TRUE --bag predictions returned aorsf object. Default TRUE. oobag_time (numeric) numeric value indicating time used --bag predictions. Default median observed pred_horizon, .e., oobag_time = median(time). oobag_eval_every (integer) --bag performance ensemble checked every oobag_eval_every trees. , oobag_eval_every = 10, --bag performance checked growing 10th tree, 20th tree, . Default oobag_eval_every = n_tree, --bag performance assessed growing trees. importance (logical) TRUE, variable importance computed using negation importance. negation importance, coefficients given variable multiplied -1 --bag error forest re-computed. greater degradation forest's error, important variable. Default FALSE. attach_data (logical) TRUE, copy training data attached output. helpful plan using functions like orsf_pd_summary interpret fitted forest using training data. Default TRUE.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"accelerated oblique RSF object (aorsf)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"function based highly similar ORSF function obliqueRSF R package. primary difference function runs 500 pred_horizon faster uses simplified Newton Raphson scoring algorithm identify linear combinations inputs rather performing penalized regression using routines glmnet.modified Newton Raphson scoring algorithm function applies adaptation C++ routine developed Terry M. Therneau fits Cox proportional hazards models (see survival::coxph()).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Breiman L. Random forests. Machine learning. 2001 Oct;45(1):5-32. DOI: 10.1023/:1010933404324 Ishwaran H, Kogalur UB, Blackstone EH, Lauer MS. Random survival forests. Annals applied statistics. 2008 Sep;2(3):841-60. DOI: 10.1214/08-AOAS169 Jaeger BC, Long DL, Long DM, Sims M, Szychowski JM, Min YI, Mcclure LA, Howard G, Simon N. Oblique random survival forests. Annals applied statistics. 2019 Sep;13(3):1847-83. DOI: 10.1214/19-AOAS1261","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"","code":"fit <- orsf(pbc_orsf, formula = Surv(time, status) ~ . - id)  print(fit) #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 19 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>          OOB C-statistic: 0.84 #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":null,"dir":"Reference","previous_headings":"","what":"Cox proportional hazards control — orsf_control_cph","title":"Cox proportional hazards control — orsf_control_cph","text":"Cox proportional hazards control","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cox proportional hazards control — orsf_control_cph","text":"","code":"orsf_control_cph(   method = \"breslow\",   eps = 1e-05,   iter_max = 1,   pval_max = 1,   do_scale = TRUE )"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cox proportional hazards control — orsf_control_cph","text":"method (character) character string specifying method tie handling. ties, methods equivalent. Valid options 'breslow' 'efron'. eps (double) using Newton Raphson scoring identify linear combinations inputs, iteration continues algorithm relative change  log partial likelihood less eps, absolute change less sqrt(eps). Must positive. iter_max (integer) using Newton Raphson scoring identify linear combinations inputs, iteration continues convergence (see eps ) number attempted iterations equal iter_max. pval_max (double) maximum p-value allowed regression coefficient remain non-zero. p-value given coefficient maximum, coefficient set zero variable longer plays role linear combination inputs. Setting pval_max 1 ensures every predict gets non-zero coefficient linear combination inputs. do_scale (logical) TRUE, values predictors scaled prior running Newton Raphson scoring. Setting FALSE reduce computation time also make regression extremely unstable. Therefore, orsf let set input FALSE also set iter_max 1.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cox proportional hazards control — orsf_control_cph","text":"object class 'aorsf_control', used input control argument orsf.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cox proportional hazards control — orsf_control_cph","text":"Therneau T.M., Grambsch P.M. (2000) Cox Model. : Modeling Survival Data: Extending Cox Model. Statistics Biology Health. Springer, New York, NY. DOI: 10.1007/978-1-4757-3294-8_3","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cox proportional hazards control — orsf_control_cph","text":"","code":"orsf(data_train = pbc_orsf,      formula = Surv(time, status) ~ . - id,      control = orsf_control_cph()) #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 19 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>          OOB C-statistic: 0.84 #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":null,"dir":"Reference","previous_headings":"","what":"Elastic net control — orsf_control_net","title":"Elastic net control — orsf_control_net","text":"Use regularized Cox proportional hazard models identify linear combinations input variables fitting orsf model.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Elastic net control — orsf_control_net","text":"","code":"orsf_control_net(alpha = 1/2, df_target = NULL)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Elastic net control — orsf_control_net","text":"alpha elastic net mixing parameter. value 1 gives lasso penalty, value 0 gives ridge penalty. multiple values alpha given, penalized model fit using alpha value prior splitting node. df_target Preferred number variables used linear combination. Note: less mtry, separate argument orsf indicates number variables chosen random prior finding linear combination variables.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Elastic net control — orsf_control_net","text":"object class 'aorsf_control', used input control argument orsf.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Elastic net control — orsf_control_net","text":"Simon N, Friedman J, Hastie T, Tibshirani R. Regularization paths Cox’s proportional hazards model via coordinate descent. Journal statistical software. 2011 Mar;39(5):1. DOI: 10.18637/jss.v039.i05","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Elastic net control — orsf_control_net","text":"","code":"# orsf_control_net() is considerably slower than orsf_control_cph(), # The example uses n_tree = 25 so that my examples run faster, # but you should use at least 500 trees in applied settings.  orsf(data_train = pbc_orsf,      formula = Surv(time, status) ~ . - id,      n_tree = 25,      control = orsf_control_net()) #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 25 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 22 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>          OOB C-statistic: 0.82 #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF interactions — orsf_interaction","title":"ORSF interactions — orsf_interaction","text":"ORSF interactions","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF interactions — orsf_interaction","text":"","code":"orsf_interaction(object, min_pairwise_obs = NULL)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF interactions — orsf_interaction","text":"object (aorsf) oblique random survival forest (ORSF; see orsf). min_pairwise_obs (integer) minimum number observations variables included linear combination together. default number trees object divided mean number leaves trees. Default number trees divided average number leaves per tree, rounded nearest integer, .e., min_pairwise_obs = round(number trees / mean(number leaves)).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF interactions — orsf_interaction","text":"data.frame pairwise interaction scores pair predictor variables object.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_interaction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ORSF interactions — orsf_interaction","text":"min_pairwise_obs single value large enough prevent consideration variable pairs infrequently used together make sense consider interacting. example, two variables used together one split entire random forest (.e., number pairwise observations = 1), make sense compute correlation.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_interaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF interactions — orsf_interaction","text":"","code":"set.seed(329)  fit <- orsf(pbc_orsf, Surv(time, status) ~ . - id, n_tree = 2500)  intr <- orsf_interaction(fit)  # edema==1 and bili are strongest interacting pair print(intr) #>             v1        v2        value #>   1:   edema_1      bili 9.516179e-02 #>   2: ascites_1      bili 8.722359e-02 #>   3: ascites_1  hepato_1 8.607192e-02 #>   4:  hepato_1   edema_1 8.104954e-02 #>   5:   edema_1    copper 7.484794e-02 #>  ---                                  #> 149:   albumin      trig 2.276298e-04 #> 150:   albumin       ast 1.765690e-04 #> 151:       age edema_0.5 1.683258e-04 #> 152:   albumin  alk.phos 1.303141e-04 #> 153: edema_0.5       ast 1.522985e-05  # make a list containing the variable values you # want to compute partial dependence for pd_spec <- list(edema = c(\"0\", \"0.5\", \"1\"),                 bili = seq(0.6, 7.1, by = 0.5))  # orsf_pd_summary automatically computes pd for all combinations # in the list (this can be turned off with expand_grid = FALSE) pd_data <- orsf_pd_summary(object = fit,                            pd_spec = pd_spec,                            expand_grid = TRUE)  # aligning predictions at lowest value of bili min_ed_0 <- with(pd_data, mean[edema == \"0\"   & bili == 0.6]) min_ed_1 <- with(pd_data, mean[edema == \"0.5\" & bili == 0.6]) min_ed_2 <- with(pd_data, mean[edema == \"1\"   & bili == 0.6])  pd_data_aligned <-  within(pd_data, {   value <- mean   value[edema == \"0\" ] <- value[edema == \"0\" ] - min_ed_0   value[edema == \"0.5\"] <- value[edema == \"0.5\"] - min_ed_1   value[edema == \"1\" ] <- value[edema == \"1\" ] - min_ed_2  })  head(pd_data_aligned) #>    edema bili      mean        lwr      medn       upr       value #> 1:     0  0.6 0.2154799 0.01718182 0.1162081 0.7622311 0.000000000 #> 2:   0.5  0.6 0.2734275 0.04075219 0.1871151 0.7838840 0.000000000 #> 3:     1  0.6 0.3839478 0.16722234 0.3064889 0.8566843 0.000000000 #> 4:     0  1.1 0.2265615 0.02078347 0.1224758 0.7777483 0.011081691 #> 5:   0.5  1.1 0.2872575 0.04639360 0.1982758 0.7951350 0.013830014 #> 6:     1  1.1 0.3936647 0.17440193 0.3152310 0.8677766 0.009716911  library(ggplot2)  ggplot(pd_data_aligned) +  aes(x = bili, y = value, col = edema) +  geom_line() +  labs(y = 'Predictions centered at Bilirubin = 0.6',       x = 'Bilirubin',       title = 'Interaction between bilirubin and edema')"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF partial dependence — orsf_pd_summary","title":"ORSF partial dependence — orsf_pd_summary","text":"ORSF partial dependence","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF partial dependence — orsf_pd_summary","text":"","code":"orsf_pd_summary(   object,   pd_data = NULL,   pd_spec,   pred_horizon = NULL,   expand_grid = TRUE,   prob_values = c(0.025, 0.5, 0.975),   prob_labels = c(\"lwr\", \"medn\", \"upr\"),   oobag = TRUE,   risk = TRUE,   boundary_checks = TRUE )  orsf_pd_ice(   object,   pd_data = NULL,   pd_spec,   pred_horizon = NULL,   expand_grid = TRUE,   oobag = TRUE,   risk = TRUE,   boundary_checks = TRUE )"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF partial dependence — orsf_pd_summary","text":"object (aorsf) accelerated oblique random survival forest model. pd_data (data frame) used compute partial dependence. NULL, training data object used. training data attached object (see attach_data input orsf), error triggered. pd_spec (named list data.frame). pd_spec named list, item list vector values used points partial dependence function. name item list indicate variable modified take corresponding values. pd_spec data.frame, columns indicate variable names, values indicate variable values, partial dependence computed using inputs row. pred_horizon (double) single time vector times indicating prediction horizon. Predicted risk survival values indicate probability event surviving baseline prediction horizon, respectively. pred_horizon values must exceed maximum follow-time object's training data. Also, pred_horizon values must entered ascending order. expand_grid (logical) TRUE, partial dependence computed possible combinations inputs pd_spec. FALSE, partial dependence computed variable pd_spec, separately. prob_values (numeric) vector values 0 1, indicating quantiles used summarize partial dependence values set inputs. prob_values length prob_labels. prob_labels (character) vector labels length prob_values, label indicating corresponding value prob_values labelled summarized outputs. prob_labels length prob_values. oobag (logical) TRUE, partial dependence computed using bag training data. set oobag = TRUE computing partial dependence using training data object. risk (logical) TRUE, predicted risk returned. FALSE, predicted survival (.e., 1-risk) returned. boundary_checks (logical) TRUE, pd_spec vetted make sure requested values 10th 90th percentile object's training data. FALSE, checks skipped.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF partial dependence — orsf_pd_summary","text":"data.table containing summarized partial dependence values using orsf_pd_summery individual conditional expectation (ICE) partial dependence using orsf_pd_ice.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF partial dependence — orsf_pd_summary","text":"","code":"fit <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  orsf_pd_summary(fit, pd_spec = list(bili = c(1,2,3,4,5,6)), pred_horizon = 1000) #>    bili      mean        lwr       medn       upr #> 1:    1 0.1327700 0.00560577 0.05554525 0.7285651 #> 2:    2 0.1578847 0.01267994 0.07669623 0.7688932 #> 3:    3 0.1947365 0.02879621 0.11287964 0.7993498 #> 4:    4 0.2282561 0.04540011 0.14877660 0.8216747 #> 5:    5 0.2511616 0.05993270 0.18030155 0.8214087 #> 6:    6 0.2724071 0.07623521 0.20879787 0.8328928  # more points for a plot pd_spec <- list(bili = seq(1, 6, length.out = 20)) data_ice <- orsf_pd_ice(fit, pd_spec = pd_spec, pred_horizon = c(1000))  head(data_ice) #>    id_variable id_row bili       pred #> 1:           1      1    1 0.73525889 #> 2:           1      2    1 0.04170434 #> 3:           1      3    1 0.35891421 #> 4:           1      4    1 0.15703049 #> 5:           1      5    1 0.06900930 #> 6:           1      6    1 0.02508543  library(ggplot2)  ggplot(data_ice) +  aes(x = bili, y = pred, group = id_row) +  geom_line(alpha = 0.4, color = 'grey') +  geom_smooth(aes(group = 1), color = 'black', se = FALSE) +  theme_bw() +  theme(panel.grid = element_blank()) #> `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF summary of univariate information — orsf_summarize_uni","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"ORSF summary univariate information","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"","code":"orsf_summarize_uni(   object,   n_variables = NULL,   pred_horizon = NULL,   risk = TRUE,   importance_type = \"anova\" )"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"object (aorsf) oblique random survival forest (ORSF; see orsf). n_variables (integer) many variables summarized? Setting input lower number improve computation time. pred_horizon (double) single time vector times indicating prediction horizon. Predicted risk survival values indicate probability event surviving baseline prediction horizon, respectively. pred_horizon values must exceed maximum follow-time object's training data. Also, pred_horizon values must entered ascending order. risk (logical) TRUE, predicted risk returned. FALSE, predicted survival (.e., 1-risk) returned. importance_type (character) method use variable importance. Valid input values 'anova' 'negate'. default 'anova' faster. See orsf_vi_negate details methods.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"object class 'aorsf_summary'","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"","code":"object <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  orsf_summarize_uni(object, n_variables = 3) #>  #> -- ascites (VI Rank: 1) ------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      0 0.2944583 0.1606852 0.05640793 0.5116135 #>      1 0.4723861 0.3922525 0.26926659 0.6613870 #>  #> -- bili (VI Rank: 2) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2309728 0.1139594 0.04893229 0.3707935 #>   1.40 0.2488877 0.1333815 0.06060192 0.3950234 #>   3.52 0.3681158 0.2759321 0.16420638 0.5507161 #>  #> -- edema (VI Rank: 3) -------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      0 0.2899927 0.1596959 0.05553018 0.5205652 #>    0.5 0.3513408 0.2297299 0.10063434 0.6181415 #>      1 0.4355201 0.3349113 0.23113015 0.6639408 #>  #>  Predicted risk at time t = 1788 for top 3 predictors"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi_negate.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF variable importance — orsf_vi_negate","title":"ORSF variable importance — orsf_vi_negate","text":"Determine importance individual variables using 'negation importance.' See 'Details' definition negation importance.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi_negate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF variable importance — orsf_vi_negate","text":"","code":"orsf_vi_negate(object, group_factors = TRUE)  orsf_vi_anova(object, group_factors = TRUE)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi_negate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF variable importance — orsf_vi_negate","text":"object object class 'aorsf'. group_factors (logical) TRUE, importance factor variables reported overall aggregating importance individual levels factor. FALSE, importance individual factor levels returned.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi_negate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF variable importance — orsf_vi_negate","text":"named vector. Names indicate predictors, values indicate importance. vector sorted highest lowest value, higher values indicating higher importance.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi_negate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ORSF variable importance — orsf_vi_negate","text":"negation importance: variable assessed separately multiplying variable's coefficients -1 determining much model's performance changes. worse model's performance negating coefficients given variable, important variable. ANOVA importance: ANOVA importance computes p-value coefficient linear combination variables decision tree oRF. Following definition proposed Menze et al, ANOVA importance aorsf individual variable proportion times p-value coefficient < 0.10.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi_negate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ORSF variable importance — orsf_vi_negate","text":"Menze, Bjoern H., et al. oblique random forests. Joint European Conference Machine Learning Knowledge Discovery Databases. Springer, Berlin, Heidelberg, 2011. DOI: 10.1007/978-3-642-23783-6_29","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi_negate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF variable importance — orsf_vi_negate","text":"","code":"fit <- orsf(pbc_orsf,             Surv(time, status) ~ . - id,             oobag_pred = TRUE)  orsf_vi_negate(fit) #>           age          bili         stage        copper       ascites  #>  0.0158325087  0.0131763971  0.0071350450  0.0065621582  0.0060413520  #>       spiders       albumin        hepato         edema           sex  #>  0.0041664497  0.0036977241  0.0028644341  0.0024105887  0.0022915473  #>       protime          chol           ast      platelet      alk.phos  #>  0.0008853706  0.0007291287  0.0005977579 -0.0002604031 -0.0004166450  #>          trig           trt  #> -0.0009895318 -0.0017707411  orsf_vi_anova(fit) #>   ascites      bili     edema       age   albumin    copper   protime     stage  #> 0.5773354 0.5407434 0.4373171 0.4271811 0.4163150 0.4126095 0.3689046 0.3670058  #>      chol       sex   spiders       ast    hepato      trig  alk.phos  platelet  #> 0.3408690 0.3279570 0.3217426 0.3185109 0.3075070 0.3014472 0.2966252 0.2550432  #>       trt  #> 0.2307409"},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"data light modification survival::pbc data. modifications :","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"","code":"pbc_orsf"},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"data frame 276 rows 20 variables: id case number time number days registration earlier death, transplantion, study analysis July, 1986 status status endpoint, 0 censored transplant, 1 dead trt randomized treatment group: D-penicillmain placebo age years sex m/f ascites presence ascites hepato presence hepatomegaly enlarged liver spiders blood vessel malformations skin edema 0 edema, 0.5 untreated successfully treated, 1 edema despite diuretic therapy bili serum bilirunbin (mg/dl) chol serum cholesterol (mg/dl) albumin serum albumin (g/dl) copper urine copper (ug/day) alk.phos alkaline phosphotase (U/liter) ast aspartate aminotransferase, called SGOT (U/ml) trig triglycerides (mg/dl) platelet platelet count protime standardised blood clotting time stage histologic stage disease (needs biopsy)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"T Therneau P Grambsch (2000), Modeling Survival Data: Extending Cox Model, Springer-Verlag, New York. ISBN: 0-387-98784-3.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"removed rows missing data converted status 0 censor transplant, 1 dead converted stage ordered factor. converted trt, ascites, hepato, spiders, edema factors.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict risk or survival — predict.aorsf","title":"Predict risk or survival — predict.aorsf","text":"Predict risk survival","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict risk or survival — predict.aorsf","text":"","code":"# S3 method for aorsf predict(object, new_data, pred_horizon, risk = TRUE, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict risk or survival — predict.aorsf","text":"object (aorsf) oblique random survival forest (ORSF; see orsf). new_data (data.frame) data compute predictions . Must columns equivalent types data used train object. Also, factors new_data must levels data used train object. Last, missing data supported. pred_horizon (double) single time vector times indicating prediction horizon. Predicted risk survival values indicate probability event surviving baseline prediction horizon, respectively. pred_horizon values must exceed maximum follow-time object's training data. Also, pred_horizon values must entered ascending order. risk (logical) TRUE, predicted risk returned. FALSE, predicted survival (.e., 1-risk) returned. ... used.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict risk or survival — predict.aorsf","text":"matrix predictions. Column j matrix corresponds value j pred_horizon. Row matrix corresponds row iin new_data.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict risk or survival — predict.aorsf","text":"","code":"train <- seq(1, nrow(pbc_orsf), by = 2) test <- seq(2, nrow(pbc_orsf), by = 2)  fit <- orsf(pbc_orsf[train, ], Surv(time, status) ~ . - id)  preds <- predict(fit,                  new_data = pbc_orsf[test, ],                  pred_horizon = c(500, 1500, 2500))  head(preds) #>             [,1]       [,2]       [,3] #> [1,] 0.044869223 0.14543208 0.30557157 #> [2,] 0.187354735 0.41742255 0.56071222 #> [3,] 0.020419537 0.08868470 0.23581293 #> [4,] 0.060948645 0.20591224 0.39934812 #> [5,] 0.057372950 0.11875398 0.23163964 #> [6,] 0.007949562 0.01711468 0.09576592"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF presentation — print.aorsf","title":"ORSF presentation — print.aorsf","text":"ORSF presentation","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF presentation — print.aorsf","text":"","code":"# S3 method for aorsf print(x, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF presentation — print.aorsf","text":"x object class 'aorsf' ... used","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF presentation — print.aorsf","text":"nothing - just print output console","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"Print ORSF summary — print.aorsf_summary_uni","title":"Print ORSF summary — print.aorsf_summary_uni","text":"Print ORSF summary","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print ORSF summary — print.aorsf_summary_uni","text":"","code":"# S3 method for aorsf_summary_uni print(x, n_variables = NULL, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print ORSF summary — print.aorsf_summary_uni","text":"x object class 'aorsf_summary' n_variables number variables print ... used","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print ORSF summary — print.aorsf_summary_uni","text":"nothing - output printed console.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print ORSF summary — print.aorsf_summary_uni","text":"","code":"object <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  smry <- orsf_summarize_uni(object, n_variables = 3)  print(smry) #>  #> -- ascites (VI Rank: 1) ------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      0 0.2951609 0.1599200 0.05489478 0.5308648 #>      1 0.4714479 0.4025091 0.27650464 0.6686145 #>  #> -- bili (VI Rank: 2) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2323521 0.1207888 0.04793893 0.3611093 #>   1.40 0.2516669 0.1393134 0.06110283 0.3796897 #>   3.52 0.3688580 0.2913398 0.17002115 0.5311702 #>  #> -- edema (VI Rank: 3) -------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      0 0.2915533 0.1547561 0.05062691 0.5308648 #>    0.5 0.3536302 0.2395740 0.10456239 0.6160053 #>      1 0.4352931 0.3388647 0.22452095 0.6501248 #>  #>  Predicted risk at time t = 1788 for top 3 predictors"},{"path":"https://bcjaeger.github.io/aorsf/news/index.html","id":"aorsf-001","dir":"Changelog","previous_headings":"","what":"aorsf 0.0.1","title":"aorsf 0.0.1","text":"Added NEWS.md file track changes package. Added vignette covering core features aorsf. Added website hosted GitHub pages.","code":""}]
