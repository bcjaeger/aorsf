[{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to aorsf","title":"Contributing to aorsf","text":"Want contribute aorsf? Great! aorsf initially stable state development, great deal active subsequent development envisioned. outline propose change aorsf. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to aorsf","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to aorsf","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to aorsf","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"bcjaeger/aorsf\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to aorsf","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://bcjaeger.github.io/aorsf/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to aorsf","text":"Please note aorsf project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://bcjaeger.github.io/aorsf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 aorsf authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"background-orsf","dir":"Articles","previous_headings":"","what":"Background: ORSF","title":"Introduction to aorsf","text":"oblique random survival forest (ORSF) extension axis-based RSF algorithm can found several R packages, including RandomForestSRC, party, ranger.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"what-is-an-oblique-decision-tree","dir":"Articles","previous_headings":"","what":"What is an oblique decision tree?","title":"Introduction to aorsf","text":"Decision trees developed splitting set training data two new subsets, goal similarity within new subsets . splitting process repeated resulting subsets data stopping criterion met. new subsets data formed based single predictor, decision tree said axis-based splits data appear perpendicular axis predictor. linear combinations variables used instead single variable, tree oblique splits data neither parallel right angle axis. Decision trees classification axis-based splitting (left) oblique splitting (right). Cases orange squares; controls purple circles. trees partition predictor space defined variables X1 X2, oblique splits better job separating two classes.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"accelerated-orsf","dir":"Articles","previous_headings":"","what":"Accelerated ORSF","title":"Introduction to aorsf","text":"purpose aorsf (‘’ short accelerated) provide routines fit ORSFs scale adequately large data sets. example, aorsf::orsf() runs 500 times faster predecessor, obliqueRSF::ORSF(). fit accelerated ORSF model, use orsf function: may notice first input aorsf data_train. design choice makes easier use orsf pipes (.e., %>% |>). instance, addition reputation slow computing, oblique decision trees considered less interpretable axis-based counterparts. opinionated developer aorsf disagrees sentiment, included routines aorsf use coefficients linear combinations input variables estimate variable importance identify pair-wise interactions.","code":"library(aorsf) library(ggplot2)  set.seed(329)  orsf_fit <- orsf(data_train = pbc_orsf,                   formula = Surv(time, status) ~ . - id,                   n_tree = 2500)  orsf_fit #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 2500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 19 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.84 #>            OOB stat type: Harrell's C-statistic #>  #> ----------------------------------------- library(dplyr)  orsf_fit <- pbc_orsf |>   select(-id) |>   orsf(formula = Surv(time, status) ~ .)"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"variable-importance","dir":"Articles","previous_headings":"Accelerated ORSF","what":"Variable importance","title":"Introduction to aorsf","text":"aorsf provides multiple ways compute variable importance. compute negation importance, ORSF multiplies coefficient variable -1 re-computes --sample (sometimes referred --bag) accuracy ORSF model.","code":"variable_importance <- orsf_vi_negate(orsf_fit)  variable_importance #>          bili           age        copper       ascites           sex  #>  0.0135444884  0.0115649094  0.0061471140  0.0048447593  0.0042196291  #>         stage       spiders       protime        hepato         edema  #>  0.0040112523  0.0039070640  0.0038028756  0.0025526151  0.0021333810  #>           ast          trig       albumin      alk.phos      platelet  #>  0.0008856012  0.0004167535  0.0000000000 -0.0013023547 -0.0020316733  #>           trt          chol  #> -0.0021879558 -0.0044280058"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"partial-dependence","dir":"Articles","previous_headings":"Accelerated ORSF","what":"Partial dependence","title":"Introduction to aorsf","text":"edema == 1 may modify effect bili. can use orsf_pd_summary() function (pd = partial dependence) explore variables influence expected prediction ORSF.  presence edema clearly impacts predicted risk, makes hard see interaction effect plot. Let’s align partial dependence values edema subgroups curve start value 0 aligned partial dependence values can see interaction effect clearly. Increasing bilirubin solicits greater increase predicted risk patients edema (edema == 0), untreated edema (edema == 0.5), successfully treated edema (edema == 0.5) compared patients therapy-resistant edema (edema == 1).  similarity trajectories patients edema == 0 edema == 0.5 suggests edema == 1 strongest modifying effect bilirubin. sanity check, can fit Cox regression model conduct likelihood ratio test interaction: interaction p-value 0.0208 interpreted usual way apriori hypothesis, (used software score every pairwise interaction data picked one strong score). However, nice see interaction identified ORSF’s partial dependence function also identified traditional modeling strategy.","code":"# make a list containing the variable values you # want to compute partial dependence for pd_spec <- list(edema = c(\"0\", \"0.5\", \"1\"),                 bili = seq(0.6, 7.1, by = 0.1))  # orsf_pd_summary automatically computes pd for all combinations # in the list (this can be turned off with expand_grid = FALSE) pd_data <- orsf_pd_summary(object = orsf_fit,                             pd_spec = pd_spec,                            expand_grid = TRUE)  ggplot(pd_data) +  aes(x = bili, y = mean, col = edema) +  geom_line() +   labs(y = 'Predicted risk',       x = 'Bilirubin',       title = 'Partial dependence of bilirubin and edema') # aligning predictions at lowest value of bili min_ed_0 <- with(pd_data, mean[edema == \"0\"   & bili == 0.6]) min_ed_1 <- with(pd_data, mean[edema == \"0.5\" & bili == 0.6]) min_ed_2 <- with(pd_data, mean[edema == \"1\"   & bili == 0.6])  pd_data_aligned <-  within(pd_data, {   value <- mean   value[edema == \"0\" ] <- value[edema == \"0\" ] - min_ed_0   value[edema == \"0.5\"] <- value[edema == \"0.5\"] - min_ed_1   value[edema == \"1\" ] <- value[edema == \"1\" ] - min_ed_2  })  head(pd_data_aligned) #>    edema bili      mean        lwr      medn       upr       value #> 1:     0  0.6 0.2128776 0.01756484 0.1126341 0.7534361 0.000000000 #> 2:   0.5  0.6 0.2751993 0.04155871 0.1882097 0.7872818 0.000000000 #> 3:     1  0.6 0.3813413 0.16789635 0.3122795 0.8565087 0.000000000 #> 4:     0  0.7 0.2143782 0.01794890 0.1152070 0.7557177 0.001500682 #> 5:   0.5  0.7 0.2772246 0.04167312 0.1895951 0.7892864 0.002025262 #> 6:     1  0.7 0.3826003 0.16799209 0.3124400 0.8591264 0.001259036 ggplot(pd_data_aligned) +  aes(x = bili, y = value, col = edema) +  geom_line() +   labs(y = 'Predictions centered at Bilirubin = 0.6',       x = 'Bilirubin',       title = 'Interaction between bilirubin and edema') library(survival)  anova(coxph(Surv(time,status) ~ edema * bili, data = pbc_orsf)) #> Analysis of Deviance Table #>  Cox model: response is Surv(time, status) #> Terms added sequentially (first to last) #>  #>             loglik   Chisq Df Pr(>|Chi|)     #> NULL       -550.19                           #> edema      -524.61 51.1681  2  7.744e-12 *** #> bili       -502.51 44.1953  1  2.972e-11 *** #> edema:bili -498.64  7.7459  2     0.0208 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"summarize-orsf-models","dir":"Articles","previous_headings":"Accelerated ORSF","what":"Summarize ORSF models","title":"Introduction to aorsf","text":"Getting straight variable importance partial dependence direct way can often helpful exploratory analyses. want lot information just little code, orsf_summarize_uni() tool :","code":"orsf_summarize_uni(orsf_fit, n_variables = 5) #>  #> -- bili (VI Rank: 1) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2303224 0.1232426 0.04928331 0.3556739 #>   1.40 0.2493383 0.1364783 0.06240488 0.3799558 #>   3.52 0.3629451 0.2809326 0.16729225 0.5370454 #>  #> -- age (VI Rank: 2) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   41.5 0.2710456 0.1378808 0.04678309 0.4645676 #>   49.7 0.2963928 0.1653473 0.05344984 0.5159703 #>   56.6 0.3261666 0.2140083 0.07259286 0.5531233 #>  #> -- copper (VI Rank: 3) ------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   42.8 0.2621926 0.1455405 0.04907613 0.4642134 #>   74.0 0.2783801 0.1634844 0.05793596 0.4795875 #>    129 0.3299214 0.2205642 0.10267176 0.5424471 #>  #> -- ascites (VI Rank: 4) ------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean   Median     25th %    75th % #>      0 0.2929154 0.163062 0.05318032 0.5097082 #>      1 0.4637308 0.382016 0.26225152 0.6590867 #>  #> -- sex (VI Rank: 5) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      m 0.3490948 0.2412210 0.11694515 0.5825721 #>      f 0.2925945 0.1569997 0.05077453 0.5154134 #>  #>  Predicted risk at time t = 1788 for top 5 predictors"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"what-about-the-original-orsf","dir":"Articles","previous_headings":"","what":"What about the original ORSF?","title":"Introduction to aorsf","text":"original ORSF (.e., obliqueRSF) used glmnet find linear combinations inputs. aorsf allows users implement approach using orsf_control_net() function: net forests fit lot faster original ORSF function obliqueRSF. However, net forests still 100 times slower cph ones:","code":"orsf_net <- orsf(data_train = pbc_orsf,                   formula = Surv(time, status) ~ . - id,                   control = orsf_control_net(),                  n_tree = 50) # tracking how long it takes to fit 50 glmnet trees print(  t1 <- system.time(   orsf(data_train = pbc_orsf,         formula = Surv(time, status) ~ . - id,         control = orsf_control_net(),        n_tree = 50)  ) ) #>    user  system elapsed  #>   3.047   0.005   3.051  # and how long it takes to fit 50 cph trees print(  t2 <- system.time(   orsf(data_train = pbc_orsf,         formula = Surv(time, status) ~ . - id,         control = orsf_control_cph(),        n_tree = 50)  ) ) #>    user  system elapsed  #>   0.023   0.000   0.024  t1['elapsed'] / t2['elapsed'] #> elapsed  #> 127.125"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"aorsf-and-other-machine-learning-software","dir":"Articles","previous_headings":"","what":"aorsf and other machine learning software","title":"Introduction to aorsf","text":"Generally, aorsf follows conventions set R packages randomForest randomForestSRC. example, print method aorsf models similar randomForestSRC models, specification computing variable importance objects returned variable importance functions. Similar randomForestSRC, aorsf allows recommends partial dependence estimated using --bag data. unique feature aorsf fitting oblique random survival forests fast maintaining strong prediction accuracy. RLT obliqueRSF fit oblique random survival forests, aorsf faster. ranger randomForestSRC fit survival forests, neither package supports oblique splitting. obliqueRF fits oblique random forests classification regression, survival. PPforest fits oblique random forests classification survival. default prediction behavior aorsf models produce predicted risk specific prediction horizon, default ranger randomForestSRC.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"out-of-bag-data","dir":"Articles","previous_headings":"","what":"Out-of-bag data","title":"Out-of-bag predictions and evaluation","text":"random forests, tree grown bootstrapped version training set. bootstrap samples selected replacement, bootstrapped training set contains two-thirds instances original training set. ‘--bag’ data instances bootstrapped training set.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"out-of-bag-predictions-and-error","dir":"Articles","previous_headings":"","what":"Out-of-bag predictions and error","title":"Out-of-bag predictions and evaluation","text":"tree random forest can make predictions --bag data, --bag predictions can aggregated make ensemble --bag prediction. Since --bag data used grow tree, accuracy ensemble --bag predictions approximate generalization error random forest. --bag prediction error plays central role routines estimate variable importance, e.g. negation importance. Let’s fit oblique random survival forest plot distribution ensemble --bag predictions.  surprisingly, survival predictions 0 1. Next, let’s check --bag accuracy fit: --bag estimate Harrell’s C-statistic (default method evaluate --bag predictions) 0.8381955.","code":"fit <- orsf(data_train = pbc_orsf,              formula = Surv(time, status) ~ . - id,             oobag_time = 3500)  hist(fit$surv_oobag,       main = 'Ensemble out-of-bag survival predictions at t=3,500') # what function is used to evaluate out-of-bag predictions? fit$eval_oobag$stat_type #> [1] \"Harrell's C-statistic\"  # what is the output from this function? fit$eval_oobag$stat_values #>           [,1] #> [1,] 0.8381955"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"monitoring-out-of-bag-error","dir":"Articles","previous_headings":"","what":"Monitoring out-of-bag error","title":"Out-of-bag predictions and evaluation","text":"--bag data set contains one-third training set, --bag error estimate usually converges stable value trees added forest. want monitor convergence --bag error oblique random survival forest, can set oobag_eval_every compute --bag error every oobag_eval_every tree. example, let’s compute --bag error fitting tree forest 50 trees:  general, least 500 trees recommended random forest fit. ’re just using 50 case better illustration --bag error curve. Also, helps make run-times low whenever need re-compile package vignettes.","code":"fit <- orsf(data_train = pbc_orsf,             formula = Surv(time, status) ~ . - id,             n_tree = 50,             oobag_time = 3500,             oobag_eval_every = 1)  plot(  x = seq(1, 50, by = 1),  y = fit$eval_oobag$stat_values,   main = 'Out-of-bag C-statistic computed after each new tree is grown.',  xlab = 'Number of trees grown',  ylab = fit$eval_oobag$stat_type )"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"user-supplied-out-of-bag-evaluation-functions","dir":"Articles","previous_headings":"","what":"User-supplied out-of-bag evaluation functions","title":"Out-of-bag predictions and evaluation","text":"cases, may want use function compute --bag error. example, simple (incorrect) way compute Brier score. (incorrect account censoring) two ways apply function compute --bag error. First, can apply function --bag survival predictions stored ‘aorsf’ objects, e.g: Second, can pass function orsf(), used place Harrell’s C-statistic:  Let’s run one example showing can done using functions packages, e.g., survivalROC survivalROC package:","code":"oobag_fun_brier <- function(y_mat, s_vec){   # risk = 1 - survival   r_vec <- 1 - s_vec   # mean of the squared differences between predicted and observed risk  mean( (y_mat[, 'status'] - r_vec)^2 )   } oobag_fun_brier(y_mat = fit$data_train[, c('time', 'status')],                 s_vec = fit$surv_oobag) #> [1] 0.1905472 fit <- orsf(data_train = pbc_orsf,             formula = Surv(time, status) ~ . - id,             n_tree = 50,             oobag_time = 3500,             oobag_fun = oobag_fun_brier,             oobag_eval_every = 1)  plot(  x = seq(1, 50, by = 1),  y = fit$eval_oobag$stat_values,   main = 'Out-of-bag error computed after each new tree is grown.',  sub = 'For the Brier score, lower values indicate more accurate predictions',  xlab = 'Number of trees grown',  ylab = \"Brier score\" ) oobag_fun_sroc <- function(y_mat, s_vec){   score <- survivalROC::survivalROC(   Stime = y_mat[, 'time'],   status = y_mat[, 'status'],   # risk = 1 - survival   marker = 1 - s_vec,   # important!! Make sure this matches the time you used in orsf   predict.time = 3500,   # nearest neighbor estimation for censoring   method = \"NNE\",   # value taken from ?survivalROC examples   span = 0.25 * nrow(y_mat)^(-0.20)  )    # oobag_fun needs to return a numeric value of length 1  score$AUC  }  fit <- orsf(data_train = pbc_orsf,             formula = Surv(time, status) ~ . - id,             n_tree = 50,             oobag_time = 3500,             oobag_fun = oobag_fun_sroc,             oobag_eval_every = 1)  plot(  x = seq(50),  y = fit$eval_oobag$stat_values,   main = 'Out-of-bag time-dependent AUC\\ncomputed after each new tree is grown.',  xlab = 'Number of trees grown',  ylab = \"AUC at t = 3,500\" )"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"specific-instructions-on-user-supplied-functions","dir":"Articles","previous_headings":"User-supplied out-of-bag evaluation functions","what":"Specific instructions on user-supplied functions","title":"Out-of-bag predictions and evaluation","text":"User-supplied functions must: exactly two arguments named y_mat s_vec. return numeric output length 1 either conditions true, error occur. simple test make sure user-supplied function work aorsf package :","code":"# Helper code to make sure your oobag_fun function will work with aorsf  # time and status values test_time <- seq(from = 1, to = 5, length.out = 100) test_status <- rep(c(0,1), each = 50)  # y-matrix is presumed to contain time and status (with column names) y_mat <- cbind(time = test_time, status = test_status) # s_vec is presumed to be a vector of survival probabilities s_vec <- seq(0.9, 0.1, length.out = 100)  # see 1 in the checklist above names(formals(oobag_fun_sroc)) == c(\"y_mat\", \"s_vec\") #> [1] TRUE TRUE  test_output <- oobag_fun_sroc(y_mat = y_mat, s_vec = s_vec)  # test output should be numeric is.numeric(test_output) #> [1] TRUE # test_output should be a numeric value of length 1 length(test_output) == 1 #> [1] TRUE"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"user-supplied-functions-for-negation-importance-","dir":"Articles","previous_headings":"","what":"User-supplied functions for negation importance.","title":"Out-of-bag predictions and evaluation","text":"Negation importance based --bag error, course may curious negation importance computed using different statistics. workflow exactly example , except specify importance = TRUE fit model. Also, speed computations, going monitor --bag error .","code":"fit_sroc <- orsf(data_train = pbc_orsf,                  formula = Surv(time, status) ~ . - id,                  n_tree = 50,                  oobag_time = 3500,                  oobag_fun = oobag_fun_sroc,                  importance = TRUE)  fit_sroc$importance #>         bili          ast      albumin          age    spiders_1    ascites_1  #>  0.065348291  0.013568224  0.013460055  0.009093290  0.008703405  0.002649834  #>    edema_0.5     platelet        stage      edema_1       copper     hepato_1  #>  0.001362267  0.001217496 -0.001797999 -0.004121918 -0.005548839 -0.007133266  #>      protime         chol  trt_placebo        sex_f     alk.phos         trig  #> -0.008457274 -0.011900253 -0.015967607 -0.019397272 -0.020249069 -0.023976616"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"multiple-functions-for-negation-importance","dir":"Articles","previous_headings":"User-supplied functions for negation importance.","what":"Multiple functions for negation importance","title":"Out-of-bag predictions and evaluation","text":"’d like compute several types negation importance model, can done using orsf_vi_negate(), allows specify --bag function just orsf() : discrepancies methods ranking important variables. simulation study determine method estimating --bag error better job discriminating important unimportant variables helpful.","code":"fit <- orsf(data_train = pbc_orsf,             formula = Surv(time, status) ~ . - id,             n_tree = 500,             oobag_time = 3500)  # use default technique (harrell's C-statistic) orsf_vi_negate(fit) #>           age          bili        copper         stage       ascites  #>  0.0093769535  0.0078141279  0.0062513024  0.0060429256  0.0046884768  #>       albumin       protime       spiders         edema           sex  #>  0.0043238175  0.0040112523  0.0034903105  0.0025228470  0.0023963326  #>           ast          trig      alk.phos           trt        hepato  #>  0.0013023547  0.0001041884 -0.0016670140 -0.0022400500 -0.0023963326  #>          chol      platelet  #> -0.0030214628 -0.0059387372  # use C-statistic from survivalROC orsf_vi_negate(fit, oobag_fun = oobag_fun_sroc) #>       albumin           sex       protime         stage        hepato  #>  0.0179500256  0.0159374606  0.0075630452  0.0057471406  0.0055161146  #>      alk.phos         edema          bili           ast      platelet  #>  0.0043170130  0.0037980328  0.0009146123 -0.0003079415 -0.0003925508  #>          trig       ascites       spiders          chol           age  #> -0.0037516559 -0.0055073453 -0.0074856079 -0.0078125194 -0.0120664183  #>           trt        copper  #> -0.0158632868 -0.0192977213"},{"path":"https://bcjaeger.github.io/aorsf/articles/oobag.html","id":"i-really-need-to-use","dir":"Articles","previous_headings":"","what":"I really need to use","title":"Out-of-bag predictions and evaluation","text":"can use package whatsoever evaluate --bag predictions. can access final --bag survival predictions aorsf model like : notes remember evaluating --bag error surv_oobag: oobag_time input orsf() determines prediction horizon --bag predictions. prediction horizon critical input evaluation predictions time--event outcomes. functions expect predicted risk (.e., 1 - predicted survival), others expect predicted survival. cases, also able use package whatsoever compute negation importance. One exception point riskRegression. experimented riskRegression found functions work expect try run C++. think may due riskRegression’s internal use data.table modification reference, certainty yet.","code":"surv_oobag <- fit$surv_oobag  surv_oobag[1:5, ] #> [1] 0.02272739 0.42057895 0.20376501 0.22562793 0.31423553"},{"path":"https://bcjaeger.github.io/aorsf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Byron Jaeger. Author, maintainer. Nicholas Pajewski. Contributor.","code":""},{"path":"https://bcjaeger.github.io/aorsf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Byron C. Jaeger, D. Leann Long, Dustin M. Long, Mario Sims, Jeff M. Szychowski, Yuan-Min, Leslie . Mcclure, George Howard, Noah Simon (2019). Oblique Random Survival Forests. Ann. Appl. Stat. 13(3): 1847-1883. URL https://doi.org/10.1214/19-AOAS1261 DOI: 10.1214/19-AOAS1261","code":"@Article{,   title = {Oblique Random Survival Forests},   author = {Byron C. Jaeger and D. Leann Long and Dustin M. Long and Mario Sims and Jeff M. Szychowski and Yuan-I Min and Leslie A. Mcclure and George Howard and Noah Simon},   journal = {Annals of Applied Statistics},   year = {2019},   volume = {13},   number = {3},   pages = {1847--1883},   url = {https://doi.org/10.1214/19-AOAS1261}, }"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"aorsf","dir":"","previous_headings":"","what":"Accelerated Oblique Random Survival Forests","title":"Accelerated Oblique Random Survival Forests","text":"aorsf provides optimized software fit, interpret, make predictions oblique random survival forests (ORSFs).","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"why-aorsf","dir":"","previous_headings":"","what":"Why aorsf?","title":"Accelerated Oblique Random Survival Forests","text":"500 times faster obliqueRSF. accurate predictions time--event outcomes. negation importance, novel technique estimate variable importance ORSFs. intuitive API formula based interface. extensive input checks + informative error messages.","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Accelerated Oblique Random Survival Forests","text":"can install development version aorsf GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"bcjaeger/aorsf\")"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Accelerated Oblique Random Survival Forests","text":"orsf() function used fit ORSFs. Printing output orsf() give descriptive statistics ensemble. interpreting fit? use orsf_vi_negate() orsf_vi_anova() variable importance use orsf_pd_ice() orsf_pd_summary() individual aggregated partial dependence values. use orsf_summarize_uni() show top predictor variables ORSF model expected predicted risk specific values predictors. (term ‘uni’ short univariate.)","code":"library(aorsf)  fit <- orsf(data_train = pbc_orsf,             formula = Surv(time, status) ~ . - id)  print(fit) #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 19 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.84 #>            OOB stat type: Harrell's C-statistic #>  #> ----------------------------------------- orsf_vi_negate(fit) #>          bili           age       spiders       ascites        copper  #>  0.0156282559  0.0127109815  0.0065638675  0.0059387372  0.0046363826  #>       protime         edema         stage        hepato          trig  #>  0.0045842884  0.0035386837  0.0022921442  0.0013023547  0.0010418837  #>           sex           ast           trt      alk.phos      platelet  #>  0.0007293186  0.0006251302 -0.0011981663 -0.0018753907 -0.0019795791  #>          chol       albumin  #> -0.0023963326 -0.0047405710 orsf_pd_summary(fit, pd_spec = list(bili = c(1:5))) #>    bili      mean        lwr      medn       upr #> 1:    1 0.2352732 0.01833523 0.1196051 0.8675898 #> 2:    2 0.2821136 0.04112874 0.1714480 0.8919186 #> 3:    3 0.3371132 0.06911118 0.2545069 0.9177142 #> 4:    4 0.3922269 0.10551068 0.3141783 0.9270324 #> 5:    5 0.4376877 0.13935792 0.3658866 0.9337528 # take a look at the top 5 variables  # for continuous predictors, see expected risk at 25/50/75th quantile # for categorical predictors, see expected risk in specified category  orsf_summarize_uni(object = fit, n_variables = 5) #>  #> -- bili (VI Rank: 1) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2302554 0.1169780 0.04856717 0.3521751 #>   1.40 0.2486047 0.1329087 0.06193197 0.3859956 #>   3.52 0.3669522 0.2779187 0.16387346 0.5419349 #>  #> -- age (VI Rank: 2) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   41.5 0.2720260 0.1353055 0.04497034 0.4635398 #>   49.7 0.2961534 0.1684676 0.05106990 0.5080294 #>   56.6 0.3249653 0.2054728 0.06901834 0.5609686 #>  #> -- spiders (VI Rank: 3) ------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      0 0.2900883 0.1547913 0.04929566 0.4958708 #>      1 0.3327155 0.2041412 0.08623750 0.5486246 #>  #> -- ascites (VI Rank: 4) ------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      0 0.2942298 0.1605606 0.05226003 0.5278228 #>      1 0.4616882 0.3752462 0.25852339 0.6415898 #>  #> -- copper (VI Rank: 5) ------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   42.8 0.2634105 0.1427394 0.04614312 0.4569345 #>   74.0 0.2789849 0.1600635 0.05747877 0.4679921 #>    129 0.3305907 0.2252363 0.09389927 0.5383923 #>  #>  Predicted risk at time t = 1788 for top 5 predictors"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Accelerated Oblique Random Survival Forests","text":"Byron C. Jaeger, D. Leann Long, Dustin M. Long, Mario Sims, Jeff M. Szychowski, Yuan-Min, Leslie . Mcclure, George Howard, Noah Simon (2019). Oblique Random Survival Forests. Ann. Appl. Stat. 13(3): 1847-1883. URL https://doi.org/10.1214/19-AOAS1261 DOI: 10.1214/19-AOAS1261","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Accelerated Oblique Random Survival Forests","text":"software receives financial support Center Biomedical Informatics, Wake Forest School Medicine.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/aorsf-package.html","id":null,"dir":"Reference","previous_headings":"","what":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","title":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","text":"Fit, interpret, make predictions oblique random survival forests. Oblique decision trees notoriously slow compared axis based counterparts, 'aorsf' runs fast faster axis-based decision tree algorithms right-censored time--event outcomes.","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/aorsf-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","text":"Maintainer: Byron Jaeger bjaeger@wakehealth.edu (ORCID) contributors: Nicholas Pajewski [contributor]","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Oblique Random Survival Forest (ORSF) — orsf","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Oblique Random Survival Forest (ORSF)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"","code":"orsf(   data_train,   formula,   control = orsf_control_cph(),   n_tree = 500,   n_split = 5,   n_retry = 0,   mtry = NULL,   leaf_min_events = 1,   leaf_min_obs = 5,   split_min_events = 5,   split_min_obs = 10,   oobag_pred = TRUE,   oobag_time = NULL,   oobag_eval_every = n_tree,   oobag_fun = NULL,   importance = FALSE,   tree_seeds = NULL,   attach_data = TRUE,   no_fit = FALSE )  orsf_train(object)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"data_train (data.frame) used grow forest. formula (formula) formula object, response left ~ operator, terms right (see details). Variables right hand size ~ can numeric, integer, factor variables. Factors may ordered unordered. control aorsf_control object, created orsf_control_net orsf_control_cph. Default control = orsf_control_cph(). n_tree (integer) number trees grow. Default n_tree = 500. n_split (integer) number cut-points assessed splitting node decision trees. Default n_split = 5. n_retry (integer) node can split, current linear combination inputs unable provide valid split, orsf try new linear combination based different set randomly selected predictors, n_retry pred_horizon. n_retry = 0 retry mechanic applied. Default n_retry = 0. mtry (integer) Number variables randomly selected candidates splitting node. default smallest integer greater square root number features, .e., mtry = ceiling(sqrt(number predictors)) leaf_min_events (integer) minimum number events leaf node. Default leaf_min_events = 1 leaf_min_obs (integer) minimum number observations leaf node. Default leaf_min_obs = 5 split_min_events (integer) minimum number events required split node. Default split_min_events = 5 split_min_obs (integer) minimum number observations required split node. Default split_min_obs = 10. oobag_pred (logical) TRUE --bag predictions returned aorsf object. Default TRUE. oobag_time (numeric) numeric value indicating time used --bag predictions. Default median observed pred_horizon, .e., oobag_time = median(time). oobag_eval_every (integer) --bag performance ensemble checked every oobag_eval_every trees. , oobag_eval_every = 10, --bag performance checked growing 10th tree, 20th tree, . Default oobag_eval_every = n_tree, --bag performance assessed growing trees. oobag_fun (function) oobag_fun = NULL (default), --bag predictions evaluated using Harrell's C-statistic. value oobag_fun provided, used place Harrell's C-statistic evaluate --bag predictions. function must two inputs: y_mat s_vec. input y_mat presumed matrix two columns named time (first column) status (second column). input s_vec presumed numeric vector containing predicted survival probabilities y_mat. importance (logical) TRUE, variable importance computed using negation importance. negation importance, coefficients given variable multiplied -1 --bag error forest re-computed. greater degradation forest's error, important variable. Default FALSE. Note oobag_fun specified , used computation negation importance. tree_seeds (integer vector) specified, random seeds set using values tree_seeds[]  growing tree . Two forests grown number trees seeds exact --bag samples , many cases, random sets candidate predictors. design makes comparisons --bag error two random forests meaningful, since --bag performance random forest depends somewhat observations picked --bag samples. tree_seeds NULL (default), seeds set training process. attach_data (logical) TRUE, copy training data attached output. helpful plan using functions like orsf_pd_summary interpret fitted forest using training data. Default TRUE. no_fit (logical) TRUE, pre-processing steps defined parametrized, training initiated. object returned can directly submitted orsf_train() long attach_data TRUE. object untrained aorsf object, created setting no_fit = TRUE orsf().","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"accelerated oblique RSF object (aorsf)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"function based highly similar ORSF function obliqueRSF R package. primary difference function runs much faster. speed increase attributable better management memory (.e., unnecessary copies inputs) using Newton Raphson scoring algorithm identify linear combinations inputs rather performing penalized regression using routines glmnet.modified Newton Raphson scoring algorithm function applies adaptation C++ routine developed Terry M. Therneau fits Cox proportional hazards models (see survival::coxph() specifically survival::coxph.fit()). comments inputs formula: response formula can survival object returned survival::Surv function, can also just time status variables. example, Surv(time, status) ~ . works just like time + status ~ .. thing can break input putting variables wrong order, .e., writing status + time ~ . make orsf assume status variable actually time variable. mtry: mtry parameter may temporarily reduced ensure least 2 events per predictor variable. occurs using orsf_control_cph coefficients Newton Raphson scoring algorithm may become unstable number covariates greater equal number events. reduction occur using orsf_control_net.#'","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Breiman L. Random forests. Machine learning. 2001 Oct;45(1):5-32. DOI: 10.1023/:1010933404324 Ishwaran H, Kogalur UB, Blackstone EH, Lauer MS. Random survival forests. Annals applied statistics. 2008 Sep;2(3):841-60. DOI: 10.1214/08-AOAS169 Jaeger BC, Long DL, Long DM, Sims M, Szychowski JM, Min YI, Mcclure LA, Howard G, Simon N. Oblique random survival forests. Annals applied statistics. 2019 Sep;13(3):1847-83. DOI: 10.1214/19-AOAS1261 Harrell FE, Califf RM, Pryor DB, Lee KL, Rosati RA. Evaluating Yield Medical Tests. JAMA. 1982;247(18):2543–2546. DOI: 10.1001/jama.1982.03320430047030","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":null,"dir":"Reference","previous_headings":"","what":"Cox proportional hazards control — orsf_control_cph","title":"Cox proportional hazards control — orsf_control_cph","text":"Cox proportional hazards control","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cox proportional hazards control — orsf_control_cph","text":"","code":"orsf_control_cph(   method = \"efron\",   eps = 1e-09,   iter_max = 1,   pval_max = 1,   do_scale = TRUE )"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cox proportional hazards control — orsf_control_cph","text":"method (character) character string specifying method tie handling. ties, methods equivalent. Valid options 'breslow' 'efron'. Efron approximation default accurate dealing tied event times similar computational efficiency compared Breslow method. eps (double) using Newton Raphson scoring identify linear combinations inputs, iteration continues algorithm relative change  log partial likelihood less eps, absolute change less sqrt(eps). Must positive. default value 1e-09 used consistency survival::coxph.control. iter_max (integer) using Newton Raphson scoring identify linear combinations inputs, iteration continues convergence (see eps ) number attempted iterations equal iter_max. default value 1 used computational efficiency. pval_max (double) maximum p-value allowed regression coefficient remain non-zero. p-value given coefficient maximum, coefficient set zero variable longer plays role linear combination inputs. Setting pval_max 1 (default) ensures mtry randomly selected predictor variables get non-zero coefficient linear combination inputs. do_scale (logical) TRUE, values predictors scaled prior running Newton Raphson scoring. Setting FALSE reduce computation time also make regression unstable, default value TRUE. stability, orsf let set input FALSE also set iter_max 1.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cox proportional hazards control — orsf_control_cph","text":"object class 'aorsf_control', used input control argument orsf.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cox proportional hazards control — orsf_control_cph","text":"Therneau T.M., Grambsch P.M. (2000) Cox Model. : Modeling Survival Data: Extending Cox Model. Statistics Biology Health. Springer, New York, NY. DOI: 10.1007/978-1-4757-3294-8_3","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cox proportional hazards control — orsf_control_cph","text":"","code":"orsf(data_train = pbc_orsf,      formula = Surv(time, status) ~ . - id,      control = orsf_control_cph()) #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 19 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.85 #>            OOB stat type: Harrell's C-statistic #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":null,"dir":"Reference","previous_headings":"","what":"Elastic net control — orsf_control_net","title":"Elastic net control — orsf_control_net","text":"Elastic net control","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Elastic net control — orsf_control_net","text":"","code":"orsf_control_net(alpha = 1/2, df_target = NULL)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Elastic net control — orsf_control_net","text":"alpha elastic net mixing parameter. value 1 gives lasso penalty, value 0 gives ridge penalty. multiple values alpha given, penalized model fit using alpha value prior splitting node. df_target Preferred number variables used linear combination. Note: less mtry, separate argument orsf indicates number variables chosen random prior finding linear combination variables.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Elastic net control — orsf_control_net","text":"object class 'aorsf_control', used input control argument orsf.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Elastic net control — orsf_control_net","text":"Simon N, Friedman J, Hastie T, Tibshirani R. Regularization paths Cox’s proportional hazards model via coordinate descent. Journal statistical software. 2011 Mar;39(5):1. DOI: 10.18637/jss.v039.i05","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Elastic net control — orsf_control_net","text":"","code":"# orsf_control_net() is considerably slower than orsf_control_cph(), # The example uses n_tree = 25 so that my examples run faster, # but you should use at least 500 trees in applied settings.  orsf(data_train = pbc_orsf,      formula = Surv(time, status) ~ . - id,      n_tree = 25,      control = orsf_control_net()) #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 25 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 21 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.81 #>            OOB stat type: Harrell's C-statistic #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF partial dependence — orsf_pd_summary","title":"ORSF partial dependence — orsf_pd_summary","text":"ORSF partial dependence","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF partial dependence — orsf_pd_summary","text":"","code":"orsf_pd_summary(   object,   pd_data = NULL,   pd_spec,   pred_horizon = NULL,   expand_grid = TRUE,   prob_values = c(0.025, 0.5, 0.975),   prob_labels = c(\"lwr\", \"medn\", \"upr\"),   oobag = TRUE,   risk = TRUE,   boundary_checks = TRUE )  orsf_pd_ice(   object,   pd_data = NULL,   pd_spec,   pred_horizon = NULL,   expand_grid = TRUE,   oobag = TRUE,   risk = TRUE,   boundary_checks = TRUE )"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF partial dependence — orsf_pd_summary","text":"object (aorsf) accelerated oblique random survival forest model. pd_data (data frame) used compute partial dependence. NULL, training data object used. training data attached object (see attach_data input orsf), error triggered. @srrstats G2.1a explicit secondary documentation expectations data types vector inputs pd_spec (named list data.frame). pd_spec named list, item list vector values used points partial dependence function. name item list indicate variable modified take corresponding values. pd_spec data.frame, columns indicate variable names, values indicate variable values, partial dependence computed using inputs row. pred_horizon (double) single time vector times indicating prediction horizon. Predicted risk survival values indicate probability event surviving baseline prediction horizon, respectively. pred_horizon values must exceed maximum follow-time object's training data. Also, pred_horizon values must entered ascending order. expand_grid (logical) TRUE, partial dependence computed possible combinations inputs pd_spec. FALSE, partial dependence computed variable pd_spec, separately. prob_values (numeric) vector values 0 1, indicating quantiles used summarize partial dependence values set inputs. prob_values length prob_labels. prob_labels (character) vector labels length prob_values, label indicating corresponding value prob_values labelled summarized outputs. prob_labels length prob_values. oobag (logical) TRUE, partial dependence computed using bag training data. set oobag = TRUE computing partial dependence using training data object. risk (logical) TRUE, predicted risk returned. FALSE, predicted survival (.e., 1-risk) returned. boundary_checks (logical) TRUE, pd_spec vetted make sure requested values 10th 90th percentile object's training data. FALSE, checks skipped.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF partial dependence — orsf_pd_summary","text":"data.table containing summarized partial dependence values using orsf_pd_summery individual conditional expectation (ICE) partial dependence using orsf_pd_ice.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF partial dependence — orsf_pd_summary","text":"","code":"fit <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  orsf_pd_summary(fit, pd_spec = list(bili = c(1,2,3,4,5,6)), pred_horizon = 1000) #>    bili      mean         lwr       medn       upr #> 1:    1 0.1331024 0.006059976 0.04815621 0.7114603 #> 2:    2 0.1572203 0.013238578 0.07668394 0.7612530 #> 3:    3 0.1905556 0.024695268 0.10379784 0.7877257 #> 4:    4 0.2227159 0.042953915 0.15110633 0.8149258 #> 5:    5 0.2483977 0.062583214 0.17831282 0.8209766 #> 6:    6 0.2730578 0.081082926 0.20514566 0.8348640  # more points for a plot pd_spec <- list(bili = seq(1, 6, length.out = 20)) data_ice <- orsf_pd_ice(fit, pd_spec = pd_spec, pred_horizon = c(1000))  head(data_ice) #>    id_variable id_row bili       pred #> 1:           1      1    1 0.74791089 #> 2:           1      2    1 0.02760239 #> 3:           1      3    1 0.39852075 #> 4:           1      4    1 0.17342792 #> 5:           1      5    1 0.04836909 #> 6:           1      6    1 0.02715404  library(ggplot2)  ggplot(data_ice) +  aes(x = bili, y = pred, group = id_row) +  geom_line(alpha = 0.4, color = 'grey') +  geom_smooth(aes(group = 1), color = 'black', se = FALSE) +  theme_bw() +  theme(panel.grid = element_blank()) #> `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale input data — orsf_scale_cph","title":"Scale input data — orsf_scale_cph","text":"functions exported users may access internal routines used scale inputs orsf_control_cph used.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale input data — orsf_scale_cph","text":"","code":"orsf_scale_cph(x_mat, w_vec = NULL)  orsf_unscale_cph(x_mat)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale input data — orsf_scale_cph","text":"x_mat (numeric matrix) matrix values scaled unscaled. Note orsf_unscale_cph accept x_mat inputs attribute containing transform values, added automatically orsf_scale_cph. w_vec (numeric vector) optional vector weights. weights supplied (default), observations equally weighted. supplied, w_vec must length equal nrow(x_mat).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale input data — orsf_scale_cph","text":"scaled unscaled x_mat.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scale input data — orsf_scale_cph","text":"data transformed first subtracting mean multiplying scale. inverse transform can completed using orsf_unscale_cph dividing column corresponding scale adding mean. values means scales stored attribute output returned orsf_scale_cph (see examples)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_scale_cph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale input data — orsf_scale_cph","text":"","code":"x_mat <- as.matrix(pbc_orsf[, c('bili', 'age', 'protime')])  head(x_mat) #>   bili      age protime #> 1 14.5 58.76523    12.2 #> 2  1.1 56.44627    10.6 #> 3  1.4 70.07255    12.0 #> 4  1.8 54.74059    10.3 #> 5  3.4 38.10541    10.9 #> 7  1.0 55.53457     9.7  x_scaled <- orsf_scale_cph(x_mat)  head(x_scaled) #>             bili        age    protime #> [1,]  3.77308887  1.0412574  1.9694656 #> [2,] -0.75476469  0.7719344 -0.1822316 #> [3,] -0.65339483  2.3544852  1.7005035 #> [4,] -0.51823502  0.5738373 -0.5856748 #> [5,]  0.02240421 -1.3581657  0.2212116 #> [6,] -0.78855464  0.6660494 -1.3925613  attributes(x_scaled) # note the transforms attribute #> $dim #> [1] 276   3 #>  #> $dimnames #> $dimnames[[1]] #> NULL #>  #> $dimnames[[2]] #> [1] \"bili\"    \"age\"     \"protime\" #>  #>  #> $transforms #>           mean     scale #> [1,]  3.333696 0.3378995 #> [2,] 49.799661 0.1161396 #> [3,] 10.735507 1.3448108 #>   x_unscaled <- orsf_unscale_cph(x_scaled)  head(x_unscaled) #>      bili      age protime #> [1,] 14.5 58.76523    12.2 #> [2,]  1.1 56.44627    10.6 #> [3,]  1.4 70.07255    12.0 #> [4,]  1.8 54.74059    10.3 #> [5,]  3.4 38.10541    10.9 #> [6,]  1.0 55.53457     9.7  # numeric difference in x_mat and x_unscaled should be practically 0 max(abs(x_mat - x_unscaled)) #> [1] 8.881784e-16"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF summary of univariate information — orsf_summarize_uni","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"ORSF summary univariate information","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"","code":"orsf_summarize_uni(   object,   n_variables = NULL,   pred_horizon = NULL,   risk = TRUE,   importance_type = \"negate\" )"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"object (aorsf) oblique random survival forest (ORSF; see orsf). n_variables (integer) many variables summarized? Setting input lower number improve computation time. pred_horizon (double) single time vector times indicating prediction horizon. Predicted risk survival values indicate probability event surviving baseline prediction horizon, respectively. pred_horizon values must exceed maximum follow-time object's training data. Also, pred_horizon values must entered ascending order. risk (logical) TRUE, predicted risk returned. FALSE, predicted survival (.e., 1-risk) returned. importance_type (character) method use variable importance. Valid input values 'anova' 'negate'. See orsf_vi_negate details methods.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"object class 'aorsf_summary'","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"","code":"object <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  orsf_summarize_uni(object, n_variables = 3) #>  #> -- bili (VI Rank: 1) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2330158 0.1272732 0.04868404 0.3636384 #>   1.40 0.2544360 0.1454217 0.06592585 0.3890975 #>   3.52 0.3683160 0.2828808 0.16304728 0.5403337 #>  #> -- age (VI Rank: 2) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   41.5 0.2728434 0.1412298 0.04502691 0.4667316 #>   49.7 0.2984773 0.1724602 0.05157684 0.5343717 #>   56.6 0.3282678 0.2193729 0.07199495 0.5664615 #>  #> -- copper (VI Rank: 3) ------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   42.8 0.2631935 0.1385719 0.04565752 0.4672048 #>   74.0 0.2804250 0.1699547 0.05577009 0.4730859 #>    129 0.3342642 0.2216730 0.10660471 0.5310275 #>  #>  Predicted risk at time t = 1788 for top 3 predictors"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate training time — orsf_time_to_train","title":"Estimate training time — orsf_time_to_train","text":"Estimate training time","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate training time — orsf_time_to_train","text":"","code":"orsf_time_to_train(object, n_tree_subset = 50)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate training time — orsf_time_to_train","text":"object untrained aorsf object n_tree_subset (integer)  many trees fit order estimate time needed train object. default value 50, usually gives good enough approximation.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate training time — orsf_time_to_train","text":"difftime object.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_time_to_train.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate training time — orsf_time_to_train","text":"","code":"# specify but do not train the model by setting no_fit = TRUE. object <- orsf(pbc_orsf, Surv(time, status) ~ . - id,                n_tree = 500, no_fit = TRUE)  # grow 50 trees to approximate the time it will take to grow 500 trees time_estimated <- orsf_time_to_train(object, n_tree_subset = 50)  print(time_estimated) #> Time difference of 0.177058 secs  # let's see how close the approximation was time_true_start <- Sys.time() fit <- orsf_train(object) time_true_stop <- Sys.time()  time_true <- time_true_stop - time_true_start  print(time_true) #> Time difference of 0.1720154 secs  # error abs(time_true - time_estimated) #> Time difference of 0.005042553 secs"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi_negate.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF variable importance — orsf_vi_negate","title":"ORSF variable importance — orsf_vi_negate","text":"Determine importance individual variables using 'negation importance.' See 'Details' definition negation importance.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi_negate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF variable importance — orsf_vi_negate","text":"","code":"orsf_vi_negate(object, group_factors = TRUE, oobag_fun = NULL)  orsf_vi_anova(object, group_factors = TRUE)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi_negate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF variable importance — orsf_vi_negate","text":"object object class 'aorsf'. group_factors (logical) TRUE, importance factor variables reported overall aggregating importance individual levels factor. FALSE, importance individual factor levels returned. oobag_fun (function) oobag_fun = NULL (default), --bag predictions evaluated using Harrell's C-statistic. value oobag_fun provided, used place Harrell's C-statistic evaluate --bag predictions. function must two inputs: y_mat s_vec. input y_mat presumed matrix two columns named time (first column) status (second column). input s_vec presumed numeric vector containing predicted survival probabilities y_mat.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi_negate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF variable importance — orsf_vi_negate","text":"named vector. Names indicate predictors, values indicate importance. vector sorted highest lowest value, higher values indicating higher importance.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi_negate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ORSF variable importance — orsf_vi_negate","text":"negation importance: variable assessed separately multiplying variable's coefficients -1 determining much model's performance changes. worse model's performance negating coefficients given variable, important variable. ANOVA importance: ANOVA importance computes p-value coefficient linear combination variables decision tree oRF. Following definition proposed Menze et al, ANOVA importance aorsf individual variable proportion times p-value coefficient < 0.10. Disclaimer: Negation importance currently development routine may tweaked future updates. ANOVA importance published Menze et al. stable lifecycle negation importance.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi_negate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ORSF variable importance — orsf_vi_negate","text":"Menze, Bjoern H., et al. oblique random forests. Joint European Conference Machine Learning Knowledge Discovery Databases. Springer, Berlin, Heidelberg, 2011. DOI: 10.1007/978-3-642-23783-6_29","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi_negate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF variable importance — orsf_vi_negate","text":"","code":"fit <- orsf(pbc_orsf,             Surv(time, status) ~ . - id,             oobag_pred = TRUE)  orsf_vi_negate(fit) #>           age          bili       protime        copper       spiders  #>  0.0150552198  0.0140654303  0.0129193582  0.0077099396  0.0052615128  #>       ascites           sex         edema        hepato       albumin  #>  0.0052094186  0.0034903105  0.0027423868  0.0022400500  0.0011460721  #>          chol          trig      alk.phos      platelet           trt  #>  0.0008856012 -0.0012502605 -0.0013544488 -0.0025005209 -0.0025526151  orsf_vi_anova(fit) #>   ascites      bili     edema       age    copper   albumin   protime     stage  #> 0.5794603 0.5322524 0.4470770 0.4248525 0.4110320 0.4088721 0.3821280 0.3816083  #>      chol       ast   spiders    hepato      trig       sex  alk.phos  platelet  #> 0.3617699 0.3421053 0.3359936 0.3297491 0.3136283 0.3078584 0.3013845 0.2629709  #>       trt  #> 0.2263538"},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"data light modification survival::pbc data. modifications :","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"","code":"pbc_orsf"},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"data frame 276 rows 20 variables: id case number time number days registration earlier death, transplantion, study analysis July, 1986 status status endpoint, 0 censored transplant, 1 dead trt randomized treatment group: D-penicillmain placebo age years sex m/f ascites presence ascites hepato presence hepatomegaly enlarged liver spiders blood vessel malformations skin edema 0 edema, 0.5 untreated successfully treated, 1 edema despite diuretic therapy bili serum bilirunbin (mg/dl) chol serum cholesterol (mg/dl) albumin serum albumin (g/dl) copper urine copper (ug/day) alk.phos alkaline phosphotase (U/liter) ast aspartate aminotransferase, called SGOT (U/ml) trig triglycerides (mg/dl) platelet platelet count protime standardised blood clotting time stage histologic stage disease (needs biopsy)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"T Therneau P Grambsch (2000), Modeling Survival Data: Extending Cox Model, Springer-Verlag, New York. ISBN: 0-387-98784-3.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"removed rows missing data converted status 0 censor transplant, 1 dead converted stage ordered factor. converted trt, ascites, hepato, spiders, edema factors.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict risk or survival — predict.aorsf","title":"Predict risk or survival — predict.aorsf","text":"Predict risk survival","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict risk or survival — predict.aorsf","text":"","code":"# S3 method for aorsf predict(object, new_data, pred_horizon, risk = TRUE, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict risk or survival — predict.aorsf","text":"object (aorsf) oblique random survival forest (ORSF; see orsf). new_data (data.frame) data compute predictions . Must columns equivalent types data used train object. Also, factors new_data must levels data used train object. Last, missing data supported. pred_horizon (double) single time vector times indicating prediction horizon. Predicted risk survival values indicate probability event surviving baseline prediction horizon, respectively. pred_horizon values must exceed maximum follow-time object's training data. Also, pred_horizon values must entered ascending order. risk (logical) TRUE, predicted risk returned. FALSE, predicted survival (.e., 1-risk) returned. ... used.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict risk or survival — predict.aorsf","text":"matrix predictions. Column j matrix corresponds value j pred_horizon. Row matrix corresponds row iin new_data.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict risk or survival — predict.aorsf","text":"","code":"#' @srrstats {ML1.1} using the terms 'train' and 'test'.  # indices of data used for training the model train <- seq(1, nrow(pbc_orsf), by = 2)  # indices of data used to test the trained model. test <- seq(2, nrow(pbc_orsf), by = 2)  fit <- orsf(pbc_orsf[train, ], Surv(time, status) ~ . - id)  preds <- predict(fit,                  new_data = pbc_orsf[test, ],                  pred_horizon = c(500, 1500, 2500))  head(preds) #>            [,1]       [,2]      [,3] #> [1,] 0.05497111 0.15407071 0.3401066 #> [2,] 0.17286451 0.41842002 0.5800146 #> [3,] 0.01705866 0.06027564 0.2046619 #> [4,] 0.06037583 0.20957947 0.4208972 #> [5,] 0.05893009 0.13536732 0.2705052 #> [6,] 0.01054581 0.01945904 0.0975965"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF presentation — print.aorsf","title":"ORSF presentation — print.aorsf","text":"ORSF presentation","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF presentation — print.aorsf","text":"","code":"# S3 method for aorsf print(x, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF presentation — print.aorsf","text":"x object class 'aorsf' ... used","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF presentation — print.aorsf","text":"nothing - just print output console","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF presentation — print.aorsf","text":"","code":"object <- orsf(pbc_orsf, Surv(time, status) ~ . - id, n_tree = 5)  print(object) #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 5 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 22 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>           OOB stat value: 0.69 #>            OOB stat type: Harrell's C-statistic #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"Print ORSF summary — print.aorsf_summary_uni","title":"Print ORSF summary — print.aorsf_summary_uni","text":"Print ORSF summary","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print ORSF summary — print.aorsf_summary_uni","text":"","code":"# S3 method for aorsf_summary_uni print(x, n_variables = NULL, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print ORSF summary — print.aorsf_summary_uni","text":"x object class 'aorsf_summary' n_variables number variables print ... used","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print ORSF summary — print.aorsf_summary_uni","text":"nothing - output printed console.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print ORSF summary — print.aorsf_summary_uni","text":"","code":"object <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  smry <- orsf_summarize_uni(object, n_variables = 3)  print(smry) #>  #> -- bili (VI Rank: 1) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2303879 0.1237781 0.04868686 0.3387522 #>   1.40 0.2491523 0.1465819 0.06006146 0.3799201 #>   3.52 0.3720385 0.2924205 0.17712500 0.5462086 #>  #> -- age (VI Rank: 2) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   41.5 0.2722783 0.1491250 0.04675212 0.4613433 #>   49.7 0.2988297 0.1715862 0.05005148 0.5259938 #>   56.6 0.3279638 0.2196613 0.07382368 0.5678796 #>  #> -- sex (VI Rank: 3) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      m 0.3488000 0.2510089 0.11354212 0.5822241 #>      f 0.2930655 0.1536475 0.05031209 0.5255294 #>  #>  Predicted risk at time t = 1788 for top 3 predictors"},{"path":"https://bcjaeger.github.io/aorsf/news/index.html","id":"aorsf-0009000","dir":"Changelog","previous_headings":"","what":"aorsf 0.0.0.9000","title":"aorsf 0.0.0.9000","text":"Core features implemented: fit, interpret, predict using oblique random survival forests. Vignettes + Readme covering usage core features. Website hosted GitHub pages, managed pkgdown.","code":""}]
