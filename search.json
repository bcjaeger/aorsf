[{"path":"https://bcjaeger.github.io/aorsf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 aorsf authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"background-oblique-rsf","dir":"Articles","previous_headings":"","what":"Background: Oblique RSF","title":"Getting started","text":"oblique random survival forest (RSF) extension axis-based RSF algorithm. Numerous R packages offer axis-based splits survival decision trees, including RandomForestSRC, party, ranger.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"what-is-an-oblique-decision-tree","dir":"Articles","previous_headings":"","what":"What is an oblique decision tree?","title":"Getting started","text":"Decision trees developed splitting set training data two new subsets, goal similarity within new subsets . splitting process repeated resulting subsets data stopping criterion met. new subsets data formed based single predictor, decision tree said axis-based splits data appear perpendicular axis predictor. linear combinations variables used instead single variable, tree oblique splits data neither parallel right angle axis. Decision trees classification axis-based splitting (left) oblique splitting (right). Cases orange squares; controls purple circles. trees partition predictor space defined variables X1 X2, oblique splits better job separating two classes.","code":""},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"accelerated-orsf","dir":"Articles","previous_headings":"","what":"Accelerated ORSF","title":"Getting started","text":"purpose aorsf provide routines fit oblique RSFs scale adequately large data sets. example, aorsf::orsf() runs 500 times faster predecessor, obliqueRSF::ORSF(). fit accelerated ORSF model, use orsf function: may notice first input aorsf data_train. design choice makes easier use orsf pipes (.e., %>% |>). instance,","code":"library(aorsf) library(ggplot2)  set.seed(329)  orsf_fit <- orsf(data_train = pbc_orsf,                   formula = Surv(time, status) ~ . - id,                   n_tree = 2500)  orsf_fit #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 2500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 19 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>          OOB C-statistic: 0.84 #>  #> ----------------------------------------- library(dplyr)  orsf_fit <- pbc_orsf |>   select(-id) |>   orsf(formula = Surv(time, status) ~ .)"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"variable-importance","dir":"Articles","previous_headings":"","what":"Variable importance","title":"Getting started","text":"coefficients used linear combinations input variables unique characteristic ORSF can used model interpretation. example, estimate importance variable, ORSF multiplies coefficient variable -1 re-computes --sample (sometimes referred --bag) accuracy ORSF model.","code":"variable_importance <- orsf_vi(orsf_fit)  variable_importance #>          bili           age        copper       protime       ascites  #>  0.0153637831  0.0125514296  0.0073954482  0.0061975939  0.0056767877  #>         stage       spiders           sex         edema           ast  #>  0.0048434977  0.0042706109  0.0038018853  0.0030777167  0.0026040310  #>        hepato       albumin      alk.phos          trig          chol  #>  0.0022915473  0.0014061768  0.0002604031 -0.0001562419 -0.0007812093  #>           trt      platelet  #> -0.0011978543 -0.0023436279"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"variable-interaction","dir":"Articles","previous_headings":"","what":"Variable interaction","title":"Getting started","text":"Another application linear combination coefficients measuring two-way interaction score. ORSF’s two-way interaction score pair predictors proportion variability coefficient one predictor explained mean . one predictor’s coefficient highly correlated another predictor’s mean value, two-way interaction score high (maximum value score 1). correlation coefficient one predictor mean value another, two-way interaction score low (minimum value score 0).","code":"variable_interaction <- orsf_interaction(orsf_fit)  variable_interaction[1:5, ] #>           v1       v2      value #> 1:   edema_1     bili 0.09516179 #> 2: ascites_1     bili 0.08722359 #> 3: ascites_1 hepato_1 0.08607192 #> 4:  hepato_1  edema_1 0.08104954 #> 5:   edema_1   copper 0.07484794"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"partial-dependence","dir":"Articles","previous_headings":"","what":"Partial dependence","title":"Getting started","text":"orsf_interaction() function indicated ascites bili strong interaction score, orsf_vi() function indicated bili important predictor. can use orsf_pd() function (pd stands partial dependence) explore variables influence predicted risk ORSF. ’ll use orsf_pd_summary compute expected predicted risk range bili values ascites either 0 1.  presence ascites clearly large effect predicted risk, makes hard see interaction effect plot. ’ll align partial dependence values ascites groups curves start prediction 0 aligned partial dependence values can see interaction effect clearly. Increasing bilirubin solicits greater increase predicted risk patients ascites versus patients . fairly intuitive increased bilirubin may sign undetected ascites.","code":"pd_spec <- list(ascites = c(\"0\",\"1\"),                 bili = seq(0.6, 7.1, by = 0.1))  pd_data <-  orsf_pd_summary(object = orsf_fit,                  pd_spec = pd_spec,                  times = 1000)  ggplot(pd_data) +  aes(x = bili, y = mean, col = ascites) +  geom_line() +   labs(y = 'Predicted risk',       x = 'Bilirubin',       title = 'Partial dependence of bilirubin and ascites') # aligning predictions at lowest value of bili min_asc_0 <- with(pd_data, mean[ascites == 0 & bili == 0.6]) min_asc_1 <- with(pd_data, mean[ascites == 1 & bili == 0.6])  pd_data_aligned <-  within(pd_data, {   mean[ascites == 0] <- mean[ascites == 0] - min_asc_0   mean[ascites == 1] <- mean[ascites == 1] - min_asc_1  })  head(pd_data_aligned) #>    ascites bili         mean         lwr       medn       upr #> 1:       0  0.6 0.0000000000 0.005571336 0.05164828 0.5479384 #> 2:       1  0.6 0.0000000000 0.112882689 0.20368704 0.7139951 #> 3:       0  0.7 0.0007918855 0.005450950 0.05087316 0.5511908 #> 4:       1  0.7 0.0009444713 0.113058207 0.20441990 0.7175981 #> 5:       0  0.8 0.0017398735 0.005524165 0.05280451 0.5569397 #> 6:       1  0.8 0.0020742942 0.113703363 0.20568055 0.7206198 ggplot(pd_data_aligned) +  aes(x = bili, y = mean, col = ascites) +  geom_line() +   labs(y = 'predicted risk, centered at Bilirubin = 0.6',       x = 'Bilirubin',       title = 'Interaction between bilirubin and ascites')"},{"path":"https://bcjaeger.github.io/aorsf/articles/aorsf.html","id":"what-about-the-old-orsf","dir":"Articles","previous_headings":"","what":"What about the old ORSF?","title":"Getting started","text":"old ORSF (.e., obliqueRSF) used glmnet find linear combinations inputs. aorsf allows users implement approach using orsf_control_net() function: Note net approach fair bit slower cph one!","code":"orsf_net <- orsf(data_train = pbc_orsf,                   formula = Surv(time, status) ~ . - id,                   control = orsf_control_net(),                  n_tree = 50) # tracking how long it takes to fit 50 glmnet trees print(  system.time(   orsf(data_train = pbc_orsf,         formula = Surv(time, status) ~ . - id,         control = orsf_control_net(),        n_tree = 50)  ) ) #>    user  system elapsed  #>   3.032   0.000   3.032  # and how long it takes to fit 50 cph trees print(  system.time(   orsf(data_train = pbc_orsf,         formula = Surv(time, status) ~ . - id,         control = orsf_control_cph(),        n_tree = 50)  ) ) #>    user  system elapsed  #>   0.024   0.000   0.024"},{"path":"https://bcjaeger.github.io/aorsf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Byron Jaeger. Author, maintainer.","code":""},{"path":"https://bcjaeger.github.io/aorsf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jaeger B (2022). aorsf: Accelerated Oblique Random Survival Forests. https://github.com/bcjaeger/aorsf, https://bcjaeger.github.io/aorsf.","code":"@Manual{,   title = {aorsf: Accelerated Oblique Random Survival Forests},   author = {Byron Jaeger},   year = {2022},   note = {https://github.com/bcjaeger/aorsf, https://bcjaeger.github.io/aorsf}, }"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"aorsf","dir":"","previous_headings":"","what":"Accelerated Oblique Random Survival Forests","title":"Accelerated Oblique Random Survival Forests","text":"goal aorsf fit, interpret, make predictions oblique random survival forests (ORSFs).","code":""},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Accelerated Oblique Random Survival Forests","text":"can install development version aorsf GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"bcjaeger/aorsf\")"},{"path":"https://bcjaeger.github.io/aorsf/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Accelerated Oblique Random Survival Forests","text":"orsf() function used fit ORSFs. Printing output orsf() give descriptive statistics ensemble. interpreting fit? several functions : orsf_vi() variable importance, orsf_interaction() two-way variable interactions, orsf_pd_ice() orsf_pd_summary() individual aggregated partial dependence values. However, orsf_summarize_uni() convenient way assess top predictor variables ORSF expected predicted risk specific values predictors. term ‘uni’ short univariate.","code":"library(aorsf)  fit <- orsf(data_train = pbc_orsf,             formula = Surv(time, status) ~ . - id)  print(fit) #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 19 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>          OOB C-statistic: 0.84 #>  #> ----------------------------------------- # take a look at the top 5 variables  # for continuous predictors, see expected risk at 25/50/75th quantile # for categorical predictors, see expected risk in each category  orsf_summarize_uni(object = fit, n_variables = 5) #>  #> -- bili (VI Rank: 1) --------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2331220 0.1252519 0.04787173 0.3698876 #>    1.4 0.2496992 0.1448403 0.06142788 0.3871287 #>    3.5 0.3623194 0.2776568 0.15801605 0.5475111 #>  #> -- age (VI Rank: 2) ---------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     42 0.2704098 0.1417984 0.04608896 0.4440794 #>     50 0.2965021 0.1667501 0.05256073 0.5070508 #>     57 0.3273849 0.2118161 0.07401963 0.5635498 #>  #> -- protime (VI Rank: 3) ------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     10 0.2788376 0.1501081 0.05137325 0.4815079 #>     11 0.2910832 0.1592242 0.05324888 0.4945039 #>     11 0.3122619 0.1899187 0.06860109 0.5257119 #>  #> -- copper (VI Rank: 4) ------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     43 0.2615647 0.1451407 0.04761734 0.4448444 #>     74 0.2781534 0.1622355 0.05967552 0.4711515 #>    129 0.3295867 0.2258534 0.10952305 0.5317666 #>  #> -- stage (VI Rank: 5) -------------------------- #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>      1 0.2576518 0.1412697 0.04913651 0.4312446 #>      2 0.2671853 0.1405898 0.04736663 0.4673936 #>      3 0.2887433 0.1564222 0.05633898 0.5015073 #>      4 0.3355217 0.2158436 0.08858787 0.5588579 #>  #>  Predicted risk at time t = 1788 for top 5 predictors"},{"path":"https://bcjaeger.github.io/aorsf/reference/aorsf-package.html","id":null,"dir":"Reference","previous_headings":"","what":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","title":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","text":"Fit, interpret, make predictions oblique random survival forests. Oblique decision trees notoriously slow compared axis based counterparts, 'aorsf' runs fast faster axis-based decision tree algorithms right-censored time--event outcomes.","code":""},{"path":[]},{"path":"https://bcjaeger.github.io/aorsf/reference/aorsf-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"aorsf: Accelerated Oblique Random Survival Forests — aorsf-package","text":"Maintainer: Byron Jaeger bjaeger@wakehealth.edu (ORCID)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Oblique Random Survival Forest (ORSF) — orsf","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"oblique random survival forest (RSF) extension RSF algorithm developed Ishwaran et al maintained RandomForestSRC package. difference oblique RSF Ishwaran's RSF oblique RSFs use linear combinations input variables instead using input variable -growing new nodes survival decision trees. details oblique RSF, see Jaeger et al, 2019.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"","code":"orsf(   data_train,   formula,   control = orsf_control_cph(),   n_tree = 500,   n_split = 5,   n_retry = 0,   mtry = NULL,   leaf_min_events = 1,   leaf_min_obs = 5,   split_min_events = 5,   split_min_obs = 10,   oobag_pred = TRUE,   oobag_time = NULL,   oobag_eval_every = n_tree,   importance = FALSE,   attach_data = TRUE )"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"data_train (data.frame) used grow forest. formula (formula) formula object, response left ~ operator, terms right. See details. control aorsf_control object, created orsf_control_net orsf_control_cph. Default orsf_control_cph(). n_tree (integer) number trees grow n_split (integer) number cut-points assessed splitting node decision trees. n_retry (integer) node can split, current linear combination inputs unable provide valid split, orsf try new linear combination based different set randomly selected predictors, n_retry times. n_retry = 0 (default) retry mechanic applied. mtry (integer) Number variables randomly selected candidates splitting node. default smallest integer greater square root number features. See details. leaf_min_events (integer) minimum number events leaf node. leaf_min_obs (integer) minimum number observations leaf node. split_min_events (integer) minimum number events required split node. split_min_obs (integer) minimum number observations required split node. oobag_pred (logical) TRUE --bag predictions returned aorsf object. oobag_time (numeric) numeric value indicating time used --bag predictions. oobag_eval_every (integer) --bag performance ensemble checked every oobag_eval_every trees. , oobag_eval_every = 10, --bag performance checked growing 10th tree, 20th tree, . importance (logical) TRUE, variable importance computed using negation importance. negation importance, coefficients given variable multiplied -1 --bag error forest re-computed. greater degradation forest's error, important variable. attach_data (logical) TRUE, copy training data attached output. helpful plan using functions like orsf_pd_summary interpret fitted forest using training data.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"accelerated oblique RSF object (aorsf)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"function based highly similar ORSF function obliqueRSF R package. primary difference function runs 200 times faster uses simplified Newton Raphson scoring algorithm identify linear combinations inputs rather performing penalized regression using routines glmnet.modified Newton Raphson scoring algorithm function applies adaptation C++ routine developed Terry M. Therneau fits Cox proportional hazards models (see survival::coxph()). oblique decision tree? Decision trees developed splitting set training data two new subsets, goal similarity within new subsets . splitting process repeated resulting subsets data stopping criterion met. new subsets data formed based single predictor, decision tree said axis-based splits data appear perpendicular axis predictor. linear combinations variables used instead single variable, tree oblique splits data neither parallel right angle axis Figure : Decision trees classification axis-based splitting (left) oblique splitting (right). Cases orange squares; controls purple circles. trees partition predictor space defined variables X1 X2, oblique splits better job separating two classes.  comments inputs formula: response formula can survival object returned survival::Surv function, can also just time status variables. example, Surv(time, status) ~ . works just like time + status ~ .. thing can break input putting variables wrong order, .e., writing status + time ~ . make orsf assume status variable actually time variable. mtry: mtry parameter may decreased fitting oblique RSF. Currently oblique RSF's fitted Newton Raphson scoring algorithm becomes unstable number covariates greater equal number events. ORSF algorithm, mtry may reduced temporarily ensure least 2 events per predictor variable.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"Jaeger BC, Long DL, Long DM, Sims M, Szychowski JM, Min YI, Mcclure LA, Howard G, Simon N. Oblique random survival forests. Annals Applied Statistics. 2019 Sep;13(3):1847-83. DOI: 10.1214/19-AOAS1261","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Oblique Random Survival Forest (ORSF) — orsf","text":"","code":"fit <- orsf(pbc_orsf, formula = Surv(time, status) ~ . - id)  print(fit) #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 19 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>          OOB C-statistic: 0.84 #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":null,"dir":"Reference","previous_headings":"","what":"Cox proportional hazards control — orsf_control_cph","title":"Cox proportional hazards control — orsf_control_cph","text":"Cox proportional hazards control","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cox proportional hazards control — orsf_control_cph","text":"","code":"orsf_control_cph(   method = \"breslow\",   eps = 1e-05,   iter_max = 1,   pval_max = 1,   do_scale = TRUE )"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cox proportional hazards control — orsf_control_cph","text":"method (character) character string specifying method tie handling. tied death times methods equivalent. Valid options 'breslow' 'efron'. eps (double) using Newton Raphson scoring identify linear combinations inputs, iteration continues algorithm relative change  log partial likelihood less eps, absolute change less sqrt(eps). Must positive. iter_max (integer) using Newton Raphson scoring identify linear combinations inputs, iteration continues convergence (see eps ) number attempted iterations equal iter_max. pval_max (double) maximum p-value allowed regression coefficient remain non-zero. p-value given coefficient maximum, coefficient set zero variable longer plays role linear combination inputs. Setting pval_max 1 ensures every predict gets non-zero coefficient linear combination inputs. do_scale (logical) TRUE, values predictors scaled prior running Newton Raphson scoring. Setting FALSE reduce computation time also make regression extremely unstable. Therefore, orsf let set input FALSE also set iter_max 1.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cox proportional hazards control — orsf_control_cph","text":"object class 'aorsf_control', used input control argument orsf.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_cph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cox proportional hazards control — orsf_control_cph","text":"","code":"orsf(data_train = pbc_orsf,      formula = Surv(time, status) ~ . - id,      control = orsf_control_cph()) #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 500 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 19 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>          OOB C-statistic: 0.84 #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":null,"dir":"Reference","previous_headings":"","what":"Elastic net control — orsf_control_net","title":"Elastic net control — orsf_control_net","text":"Elastic net control","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Elastic net control — orsf_control_net","text":"","code":"orsf_control_net(alpha = 1/2, df_target = NULL)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Elastic net control — orsf_control_net","text":"alpha elastic net mixing parameter. value 1 gives lasso penalty, value 0 gives ridge penalty. multiple values alpha given, penalized model fit using alpha value prior splitting node. df_target Preferred number variables used linear combination. Note: less mtry, separate argument orsf indicates number variables chosen random prior finding linear combination variables.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Elastic net control — orsf_control_net","text":"object class 'aorsf_control', used input control argument orsf.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_control_net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Elastic net control — orsf_control_net","text":"","code":"# orsf_control_net() is considerably slower than orsf_control_cph(), # The example uses n_tree = 25 so that my examples run faster, # but you should use at least 500 trees in applied settings.  orsf(data_train = pbc_orsf,      formula = Surv(time, status) ~ . - id,      n_tree = 25,      control = orsf_control_net()) #> ---------- Oblique random survival forest #>  #>           N observations: 276 #>                 N events: 111 #>                  N trees: 25 #>       N predictors total: 17 #>    N predictors per node: 5 #>  Average leaves per tree: 22 #> Min observations in leaf: 5 #>       Min events in leaf: 1 #>          OOB C-statistic: 0.83 #>  #> -----------------------------------------"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF interactions — orsf_interaction","title":"ORSF interactions — orsf_interaction","text":"ORSF interactions","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF interactions — orsf_interaction","text":"","code":"orsf_interaction(object)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF interactions — orsf_interaction","text":"object (aorsf) oblique random survival forest (ORSF; see orsf).","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF interactions — orsf_interaction","text":"data.frame pairwise interaction scores pair predictor variables object.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_interaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF interactions — orsf_interaction","text":"","code":"pbc_orsf$ascites <- factor(pbc_orsf$ascites)  set.seed(32987)  fit <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  intr <- orsf_interaction(fit)  pd_spec <- list(ascites = c(\"0\",\"1\"),                 bili = seq(0.6, 7.1, by = 0.25))  pd_data <- orsf_pd_summary(fit, pd_spec = pd_spec, times = 1000)  # aligning predictions at lowest value of bili min_asc_0 <- with(pd_data, mean[ascites == 0 & bili == 0.6]) min_asc_1 <- with(pd_data, mean[ascites == 1 & bili == 0.6])  pd_data_aligned <-  within(pd_data, {   mean[ascites == 0] <- mean[ascites == 0] - min_asc_0   mean[ascites == 1] <- mean[ascites == 1] - min_asc_1  })  library(ggplot2)  ggplot(pd_data_aligned) +  aes(x = bili, y = mean, col = factor(ascites)) +  geom_line() +  theme_bw()"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF partial dependence — orsf_pd_summary","title":"ORSF partial dependence — orsf_pd_summary","text":"ORSF partial dependence","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF partial dependence — orsf_pd_summary","text":"","code":"orsf_pd_summary(   object,   pd_data = NULL,   pd_spec,   times = NULL,   expand_grid = TRUE,   prob_values = c(0.025, 0.5, 0.975),   prob_labels = c(\"lwr\", \"medn\", \"upr\"),   oobag = TRUE,   risk = TRUE,   boundary_checks = TRUE )  orsf_pd_ice(   object,   pd_data = NULL,   pd_spec,   times = NULL,   expand_grid = TRUE,   oobag = TRUE,   risk = TRUE,   boundary_checks = TRUE )"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF partial dependence — orsf_pd_summary","text":"object (aorsf) accelerated oblique random survival forest model. pd_data (data frame) used compute partial dependence. NULL, training data object used. training data attached object (see attach_data input orsf), error triggered. pd_spec (named list data.frame). pd_spec named list, item list vector values used points partial dependence function. name item list indicate variable modified take corresponding values. pd_spec data.frame, columns indicate variable names, values indicate variable values, partial dependence computed using inputs row. times (double) single time vector times oblique RSF predictions. times values must exceed maximum follow-time oblique RSF's training data. Also, times must entered ascending order. expand_grid (logical) TRUE, partial dependence computed possible combinations inputs pd_spec. FALSE, partial dependence computed variable pd_spec, separately. prob_values (numeric) vector values 0 1, indicating quantiles used summarize partial dependence values set inputs. prob_labels (character) vector labels length prob_values, label indicating corresponding value prob_values labelled summarized outputs. oobag (logical) TRUE, partial dependence computed using bag training data. set oobag = TRUE computing partial dependence using training data object. risk (logical) TRUE, predicted risk returned. FALSE, predicted survival (.e., 1-risk) returned. boundary_checks (logical) TRUE, pd_spec vetted make sure requested values 10th 90th percentile object's training data. FALSE, checks skipped.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF partial dependence — orsf_pd_summary","text":"data.frame containing summarized partial dependence values using orsf_pd_summery individual conditional expectation (ICE) partial dependence using orsf_pd_ice.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_pd_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF partial dependence — orsf_pd_summary","text":"","code":"fit <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  orsf_pd_summary(fit, pd_spec = list(bili = c(1,2,3,4,5,6)), times = 1000) #>    bili      mean         lwr       medn       upr #> 1:    1 0.1352181 0.005419162 0.05273802 0.7109394 #> 2:    2 0.1593848 0.013119138 0.07712832 0.7552146 #> 3:    3 0.1940532 0.027912711 0.11226026 0.7870830 #> 4:    4 0.2230906 0.049749701 0.15037839 0.8198058 #> 5:    5 0.2502889 0.061406242 0.17961843 0.8324534 #> 6:    6 0.2750794 0.082479560 0.21021593 0.8367464  # more points for a plot pd_spec <- list(bili = seq(1, 6, length.out = 20)) data_ice <- orsf_pd_ice(fit, pd_spec = pd_spec, times = 1000)  head(data_ice) #>    id_variable id_row bili       pred #> 1:           1      1    1 0.77123567 #> 2:           1      2    1 0.04192181 #> 3:           1      3    1 0.37686240 #> 4:           1      4    1 0.18675595 #> 5:           1      5    1 0.06109896 #> 6:           1      6    1 0.01511175  library(ggplot2) ggplot(data_ice) +  aes(x = bili, y = pred, group = id_row) +  geom_line(alpha = 0.4, color = 'grey') +  geom_smooth(aes(group = 1), color = 'black', se = FALSE) +  theme_bw() +  theme(panel.grid = element_blank()) #> `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF summary of univariate information — orsf_summarize_uni","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"ORSF's linear combinations inputs can used provide helpful data individual variables. Summarizing univariate information ORSF provides data importance individual variables expected predicted risk designated values variables.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"","code":"orsf_summarize_uni(object, n_variables = NULL, times = NULL, risk = TRUE)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"object (aorsf) oblique random survival forest (ORSF; see orsf). n_variables (integer) many variables summarized? Setting input lower number improve computation time. times (double) single time vector times oblique RSF predictions. times values must exceed maximum follow-time oblique RSF's training data. Also, times must entered ascending order. risk (logical) TRUE, predicted risk returned. FALSE, predicted survival (.e., 1-risk) returned.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"object class 'aorsf_summary'","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_summarize_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF summary of univariate information — orsf_summarize_uni","text":"","code":"object <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  orsf_summarize_uni(object, n_variables = 3) #>  #> -- 1 (VI Rank: 1) ------------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     42 0.2692738 0.1310593 0.04487348 0.4533908 #>     50 0.2955560 0.1612268 0.05282062 0.5021296 #>     57 0.3274544 0.2134869 0.07334726 0.5502459 #>  #> -- 2 (VI Rank: 2) ------------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2270731 0.1187680 0.04273851 0.3463064 #>    1.4 0.2468112 0.1342106 0.05653561 0.3692547 #>    3.5 0.3664174 0.2898311 0.16443210 0.5355515 #>  #> -- 3 (VI Rank: 3) ------------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     10 0.2776875 0.1470030 0.05001428 0.4885425 #>     11 0.2894622 0.1574799 0.05646105 0.5114524 #>     11 0.3109973 0.1782717 0.07217008 0.5324219 #>  #>  Predicted risk at time t = 1788 for top 3 predictors"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF variable importance — orsf_vi","title":"ORSF variable importance — orsf_vi","text":"ORSF variable importance","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF variable importance — orsf_vi","text":"","code":"orsf_vi(object, group_factors = TRUE)"},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF variable importance — orsf_vi","text":"object object class 'aorsf'. group_factors (logical) TRUE, importance factor variables reported overall aggregating importance individual levels factor. FALSE, importance individual factor levels returned.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF variable importance — orsf_vi","text":"object variable importance attached.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ORSF variable importance — orsf_vi","text":"method used compute variable importance ORSF called 'negation importance'. variable assessed separately multiplying variable's coefficients -1 determining much model's performance changes. worse model's performance negating coefficients given variable, important variable.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/orsf_vi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORSF variable importance — orsf_vi","text":"","code":"fit <- orsf(pbc_orsf,             Surv(time, status) ~ . - id,             oobag_pred = TRUE)  orsf_vi(fit) #>          bili           age       protime        copper       spiders  #>  0.0182802979  0.0138013645  0.0105723660  0.0056767877  0.0056247070  #>       ascites         stage           sex         edema       albumin  #>  0.0055205458  0.0054163846  0.0035414822  0.0021291054  0.0014786922  #>      platelet        hepato           ast          chol      alk.phos  #>  0.0009374512 -0.0001562419 -0.0002083225 -0.0003124837 -0.0004166450  #>          trig           trt  #> -0.0017707411 -0.0024477892"},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"data light modification survival::pbc data. modifications :","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"","code":"pbc_orsf"},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"data frame 276 rows 20 variables: id case number time number days registration earlier death, transplantion, study analysis July, 1986 status status endpoint, 0 censored transplant, 1 dead trt randomized treatment group: D-penicillmain placebo age years sex m/f ascites presence ascites hepato presence hepatomegaly enlarged liver spiders blood vessel malformations skin edema 0 edema, 0.5 untreated successfully treated, 1 edema despite diuretic therapy bili serum bilirunbin (mg/dl) chol serum cholesterol (mg/dl) albumin serum albumin (g/dl) copper urine copper (ug/day) alk.phos alkaline phosphotase (U/liter) ast aspartate aminotransferase, called SGOT (U/ml) trig triglycerides (mg/dl) platelet platelet count protime standardised blood clotting time stage histologic stage disease (needs biopsy)","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"T Therneau P Grambsch (2000), Modeling Survival Data: Extending Cox Model, Springer-Verlag, New York. ISBN: 0-387-98784-3.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/pbc_orsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mayo Clinic Primary Biliary Cholangitis Data — pbc_orsf","text":"removed rows missing data converted status 0 censor transplant, 1 dead converted stage ordered factor. converted trt, ascites, hepato, spiders, edema factors.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict risk or survival — predict.aorsf","title":"Predict risk or survival — predict.aorsf","text":"Predict risk survival","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict risk or survival — predict.aorsf","text":"","code":"# S3 method for aorsf predict(object, new_data, times, risk = TRUE, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict risk or survival — predict.aorsf","text":"object (aorsf) oblique random survival forest (ORSF; see orsf). new_data (data.frame) data compute predictions . Must columns equivalent types data used train object. Also, factors new_data must levels data used train object. Last, missing data supported. times (double) single time vector times oblique RSF predictions. times values must exceed maximum follow-time oblique RSF's training data. Also, times must entered ascending order. risk (logical) TRUE, predicted risk returned. FALSE, predicted survival (.e., 1-risk) returned. ... used.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict risk or survival — predict.aorsf","text":"matrix predictions. Column j matrix corresponds value j times. Row matrix corresponds row iin new_data.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/predict.aorsf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict risk or survival — predict.aorsf","text":"","code":"train <- seq(1, nrow(pbc_orsf), by = 2) test <- seq(2, nrow(pbc_orsf), by = 2)  fit <- orsf(pbc_orsf[train, ], Surv(time, status) ~ . - id)  preds <- predict(fit,                  new_data = pbc_orsf[test, ],                  times = c(500, 1500, 2500))  head(preds) #>             [,1]       [,2]       [,3] #> [1,] 0.045186425 0.14359559 0.30285184 #> [2,] 0.170846141 0.40936879 0.55408161 #> [3,] 0.014606498 0.07983880 0.23217102 #> [4,] 0.053887113 0.19394041 0.37874852 #> [5,] 0.067656441 0.13625050 0.26066758 #> [6,] 0.008540254 0.01627401 0.09027516"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":null,"dir":"Reference","previous_headings":"","what":"ORSF presentation — print.aorsf","title":"ORSF presentation — print.aorsf","text":"ORSF presentation","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORSF presentation — print.aorsf","text":"","code":"# S3 method for aorsf print(x, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORSF presentation — print.aorsf","text":"x object class 'aorsf' ... used","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORSF presentation — print.aorsf","text":"nothing - just print output console","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"Print ORSF summary — print.aorsf_summary_uni","title":"Print ORSF summary — print.aorsf_summary_uni","text":"Print ORSF summary","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print ORSF summary — print.aorsf_summary_uni","text":"","code":"# S3 method for aorsf_summary_uni print(x, n_variables = NULL, ...)"},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print ORSF summary — print.aorsf_summary_uni","text":"x object class 'aorsf_summary' n_variables number variables print ... used","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print ORSF summary — print.aorsf_summary_uni","text":"nothing - output printed console.","code":""},{"path":"https://bcjaeger.github.io/aorsf/reference/print.aorsf_summary_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print ORSF summary — print.aorsf_summary_uni","text":"","code":"object <- orsf(pbc_orsf, Surv(time, status) ~ . - id)  smry <- orsf_summarize_uni(object, n_variables = 3)  print(smry) #>  #> -- 2 (VI Rank: 1) ------------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>   0.80 0.2310270 0.1181015 0.05293073 0.3563591 #>    1.4 0.2502546 0.1404306 0.06424322 0.3883664 #>    3.5 0.3662063 0.2831497 0.16763036 0.5426141 #>  #> -- 1 (VI Rank: 2) ------------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     42 0.2723601 0.1404704 0.04882297 0.4486407 #>     50 0.2985764 0.1700417 0.05439152 0.5090264 #>     57 0.3274084 0.2176652 0.07571543 0.5533756 #>  #> -- 3 (VI Rank: 3) ------------------------------ #>  #>        |---------------- risk ----------------| #>  Value      Mean    Median     25th %    75th % #>     43 0.2610782 0.1472669 0.05037585 0.4570850 #>     74 0.2799128 0.1653180 0.06246852 0.4918984 #>    129 0.3338423 0.2314497 0.10853566 0.5547992 #>  #>  Predicted risk at time t = 1788 for top 3 predictors"}]
