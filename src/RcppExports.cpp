// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// x_scale_wtd
arma::mat x_scale_wtd();
RcppExport SEXP _orsf2_x_scale_wtd() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(x_scale_wtd());
    return rcpp_result_gen;
END_RCPP
}
// cholesky
void cholesky();
RcppExport SEXP _orsf2_cholesky() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    cholesky();
    return R_NilValue;
END_RCPP
}
// cholesky_solve
void cholesky_solve();
RcppExport SEXP _orsf2_cholesky_solve() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    cholesky_solve();
    return R_NilValue;
END_RCPP
}
// cholesky_invert
void cholesky_invert();
RcppExport SEXP _orsf2_cholesky_invert() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    cholesky_invert();
    return R_NilValue;
END_RCPP
}
// newtraph_cph_iter
double newtraph_cph_iter(const arma::uword& method, const arma::vec& beta);
RcppExport SEXP _orsf2_newtraph_cph_iter(SEXP methodSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(newtraph_cph_iter(method, beta));
    return rcpp_result_gen;
END_RCPP
}
// newtraph_cph_init
double newtraph_cph_init(const arma::uword& method);
RcppExport SEXP _orsf2_newtraph_cph_init(SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(newtraph_cph_init(method));
    return rcpp_result_gen;
END_RCPP
}
// newtraph_cph
arma::mat newtraph_cph(NumericMatrix& x, NumericMatrix& y, NumericVector& weights, const arma::uword& method, const double& eps, const arma::uword& iter_max, const bool& rescale);
RcppExport SEXP _orsf2_newtraph_cph(SEXP xSEXP, SEXP ySEXP, SEXP weightsSEXP, SEXP methodSEXP, SEXP epsSEXP, SEXP iter_maxSEXP, SEXP rescaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< const bool& >::type rescale(rescaleSEXP);
    rcpp_result_gen = Rcpp::wrap(newtraph_cph(x, y, weights, method, eps, iter_max, rescale));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_orsf2_x_scale_wtd", (DL_FUNC) &_orsf2_x_scale_wtd, 0},
    {"_orsf2_cholesky", (DL_FUNC) &_orsf2_cholesky, 0},
    {"_orsf2_cholesky_solve", (DL_FUNC) &_orsf2_cholesky_solve, 0},
    {"_orsf2_cholesky_invert", (DL_FUNC) &_orsf2_cholesky_invert, 0},
    {"_orsf2_newtraph_cph_iter", (DL_FUNC) &_orsf2_newtraph_cph_iter, 2},
    {"_orsf2_newtraph_cph_init", (DL_FUNC) &_orsf2_newtraph_cph_init, 1},
    {"_orsf2_newtraph_cph", (DL_FUNC) &_orsf2_newtraph_cph, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_orsf2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
